[{
	"姓名": "尹铭权",
	"编号": "319",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "懒加载可以使用vue的异步组件或者webpack的require。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "懒加载可以使用vue的异步组件或者webpack的require。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、重复，冗余2、多个循环嵌套3、图片内存太大，并且未使用懒加载4、使用组件时，未使用CDN，而是直接下载下来，增加网站代码量",
	"4.在Webpack中，如何配置loader和plugin": "webpack.config.js",
	"5.请说说前端怎么处理网络性能优化？": "1、减少http的请求2、对图片进行优化，可以使用懒加载3、引入组件的时候，使用CDN4、将重复的代码提取出来，创建公共组件，减少渲染和加载次数"
}, {
	"姓名": "邱柳峰",
	"编号": "318",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用ES6的import（）让打包的时候webpack进行代码切割",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用ES6的import（）让打包的时候webpack进行代码切割",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.不合理的遍历2.代码的冗余3.第三方库的多余4.多余的http请求5.闭包造成的内存泄漏6.被遗忘的定时器7.重绘与回流过多",
	"4.在Webpack中，如何配置loader和plugin": "在配置文件里进行配置，一般项目已经自动配置基本的",
	"5.请说说前端怎么处理网络性能优化？": "1.懒加载2.CDN优化3.服务端渲染4.加载顺序"
}, {
	"姓名": "邓楚",
	"编号": "317",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "实现路由懒加载：1、vue的异步组件2、es6提供的import语法3、webpack提供的require.ensure方法vue是单页面运用如果不使用路由懒加载那么第一次打开页面会把所有页面全部加载非常耗费时间而使用了懒加载后访问哪个路由就只加载该路由对应内容",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "实现路由懒加载：1、vue的异步组件2、es6提供的import语法3、webpack提供的require.ensure方法vue是单页面运用如果不使用路由懒加载那么第一次打开页面会把所有页面全部加载非常耗费时间而使用了懒加载后访问哪个路由就只加载该路由对应内容",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、需要耗费一定时间的同步任务太多2、闭包的滥用3、如果页面加载数据过多并且不使用懒加载4、短时间内http请求过多数据过大5、全局变量使用过多所存储数据过大并且没有及时释放",
	"4.在Webpack中，如何配置loader和plugin": "这两个都需要在webpack.config.js文件中配置相应loader在module.rules中配置而plugin需要在plugins属性中配置",
	"5.请说说前端怎么处理网络性能优化？": "1、延迟加载2、减少http请求3、使用数据懒加载"
}, {
	"姓名": "王乐源",
	"编号": "316",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "通过使用import()动态导入的方式来导入组件。由于vue的代码最终会被babel转成js文件，默认情况下会转陈一个js文件，就是导致一次加载就加载全部js，而如果使用import()，webpack打包时会打包成多个js文件，这样js文件只有在使用时才会加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "通过使用import()动态导入的方式来导入组件。由于vue的代码最终会被babel转成js文件，默认情况下会转陈一个js文件，就是导致一次加载就加载全部js，而如果使用import()，webpack打包时会打包成多个js文件，这样js文件只有在使用时才会加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "对react或者vue来说，影响性能的很大一部分是复杂组件的多次渲染，如果某些复杂组件不必要的渲染次数过多，就会导致页面卡顿。因此可以使用memo，PureComponent，useMemo，useCallback等api来减少组件不必要的渲染。我之前也写过一篇避免重复渲染的文章：https://juejin.cn/post/7079414356277985316",
	"4.在Webpack中，如何配置loader和plugin": "两者都在webpack.config.js中配置。loader在moudle>rules中配置，通过设置文件后缀的正则匹配，配置对应的loader。plugin则直接导入，并在plugins中声明即可。",
	"5.请说说前端怎么处理网络性能优化？": "可以升级http协议。减少关键渲染路径，如css中引入别的css，会导致页面首屏渲染时多请求一次从而减慢首屏渲染时间。dns预解析。对于一些不常变化的资源使用缓存。上文提到的懒加载。路由缓存，减少请求。request节流。"
}, {
	"姓名": "梁成林",
	"编号": "315",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以通过使用`import()`动态导入路由组件的方式来实现路由的懒加载。当定义路由时，可以将路由组件的`component`属性设置为一个函数，该函数返回一个Promise，Promise的resolve值为路由组件。在用户访问该路由时，VueRouter会根据路由的路径自动进行路由组件的按需加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以通过使用`import()`动态导入路由组件的方式来实现路由的懒加载。当定义路由时，可以将路由组件的`component`属性设置为一个函数，该函数返回一个Promise，Promise的resolve值为路由组件。在用户访问该路由时，VueRouter会根据路由的路径自动进行路由组件的按需加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.大量的DOM操作：频繁地对DOM进行添加、删除或修改操作会导致浏览器频繁重绘和回流，降低页面的性能。2.缺少合适的缓存策略：如果页面中的资源没有进行缓存处理，每次请求都需要从服务器获取数据，会导致页面加载速度变慢，性能下降。3.过多的HTTP请求：每个HTTP请求开销都会消耗一定的时间和网络带宽，过多的HTTP请求会造成页面加载时间增长，降低性能。4.代码复杂度高：代码的复杂度越高，执行起来越耗时，可能会导致页面响应缓慢或浏览器崩溃。5.没有使用合适的图片格式和大小：使用过大的图片或不合适的图片格式会造成页面加载时间增长，影响性能。6.没有对JavaScript进行优化：没有对JavaScript进行压缩、合并以及减少全局变量等优化措施，会导致JavaScript加载时间过长，影响性能。7.未使用CDN：CDN可以使用就近的节点进行资源缓存，加速网站的访问速度，但没有使用CDN可能导致资源加载时间过长，降低性能。",
	"4.在Webpack中，如何配置loader和plugin": "在webpack中，我们可以通过配置loader和plugin来对模块中的代码进行处理和修改，使得代码最终能够被打包成可执行的文件。loader是webpack中最重要的概念之一，它可以将各种类型的文件转换为webpack可以理解的模块，使得这些文件能够被打包到最终的应用程序中。使用loader，我们可以对各种类型的文件进行编译、压缩、转换等操作。在webpack配置文件中，我们可以通过module.rules属性来定义loaderplugin是webpack中用来扩展其功能的插件，它可以在打包过程中完成一些额外的工作。使用plugin，我们可以在打包时修改模块代码、注入变量、优化打包结果等等。在webpack配置文件中，我们可以通过plugins属性来定义plugin",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTP请求:合并文件、使用图片精灵、使用字体图标等，从而减少HTTP请求次数。2.压缩文件:使用gzip或deflate对HTML、CSS、JS等文件进行压缩。3.使用CDN加速:使用CDN可以将静态资源分布在全球各地的服务器，从而缩短请求时间。4.避免重定向:避免多次重定向，直接访问最终页面5.减小文件体积:减小HTML、CSS、JS等文件的体积，从而降低下载时间和加载时间6.异步加载:使用异步加载JS文件，从而不会阻塞页面渲染7.懒加载:将图片等资源延迟加载，从而减少资源的浪费和下载时间。8.使用缓存:使用浏览器的缓存机制，减少资源的重复下载"
}, {
	"姓名": "蒋恺",
	"编号": "314",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用异步组件技术实现路由懒加载。用const申明一个变量，接收import导入的路由地址，在访问路由时实现按需加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用异步组件技术实现路由懒加载。用const申明一个变量，接收import导入的路由地址，在访问路由时实现按需加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "频繁发送http请求，静态文件下载过多，重复引入组件等文件，过多的计算与逻辑处理",
	"4.在Webpack中，如何配置loader和plugin": "参考文档https://blog.csdn.net/weixin_52139966/article/details/117790916",
	"5.请说说前端怎么处理网络性能优化？": "尽量减少HTTP请求次数、减少DNS查找次数、避免跳转、可缓存的AJAX、推迟加载内容、预加载、减少DOM元素数量、根据域名划分页面内容"
}, {
	"姓名": "黄嘉林",
	"编号": "313",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "如果不应用懒加载的话，很多页面都会打包到同一个js文件中，文件将会异常的大。造成进入首页时，需要加载的内容过多，时间过长，在浏览器中可能会出现短暂的空白页，从而降低用户体验，我们可以通过使用vue的异步组件技术，但是每个组件会产生一个js文件，也可以使用es6的import，const组件名=()=>import('组件路径')，也可以使用webpack提供的require.ensure()实现懒加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "如果不应用懒加载的话，很多页面都会打包到同一个js文件中，文件将会异常的大。造成进入首页时，需要加载的内容过多，时间过长，在浏览器中可能会出现短暂的空白页，从而降低用户体验，我们可以通过使用vue的异步组件技术，但是每个组件会产生一个js文件，也可以使用es6的import，const组件名=()=>import('组件路径')，也可以使用webpack提供的require.ensure()实现懒加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "循环遍历，复杂计算量，大量监听事件",
	"4.在Webpack中，如何配置loader和plugin": "先npm下载需要的loader，然后在rules里面use需要的loader如use:[{loader:\"style-loader\"}，{loader:\"css-loader\"}，{loader:\"less-loader\"}]plugin则是通过npm安装需要使用的plugins然后在webpack.config.js中的plugins中配置插件如plugins:[newwebpack.BannerPlugin(\"(c)”]",
	"5.请说说前端怎么处理网络性能优化？": "1.减少http请求次数，2.预加载懒加载，3，压缩文件体积4.减少dom访问"
}, {
	"姓名": "赵文彬",
	"编号": "312",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "\"Q1:vue-router配置路由，使用vue的异步组件技术，可以实现按需加载。Q2:constList=()=>import('@/components/list.vue')constrouter=newVueRouter({routes:[{",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "path:'/list'，",
	"3.在前端开发中，什么样的代码会导致性能很低？": "component:List",
	"4.在Webpack中，如何配置loader和plugin": "}]})\"",
	"5.请说说前端怎么处理网络性能优化？": "\"Q1:vue-router配置路由，使用vue的异步组件技术，可以实现按需加载。Q2:constList=()=>import('@/components/list.vue')constrouter=newVueRouter({routes:[{"
}, {
	"姓名": "陈开邦",
	"编号": "311",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter通过异步组件实现路由的懒加载，即在需要的时候才加载组件。在VueRouter中，可以使用import()语法引入组件。```jsconstrouter=newVueRouter({routes:[{path:'/home'，component:()=>import('./views/Home.vue')}]})```",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter通过异步组件实现路由的懒加载，即在需要的时候才加载组件。在VueRouter中，可以使用import()语法引入组件。```jsconstrouter=newVueRouter({routes:[{path:'/home'，component:()=>import('./views/Home.vue')}]})```",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.没有进行过算法优化的排序。2.高频用v-if，低频用v-show3.迭代的元素没有添加key值，导致每个元素都是undefined，一旦顺序不一样，就会导致多余的创建、删除节点。4.动画实现方面使用了setTimeout/setInterval，而没有使用requestAnimationFrame去优化。5.数据量大的情况下，列表渲染没有使用懒加载/虚拟列表。",
	"4.在Webpack中，如何配置loader和plugin": "module.exports={module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}，{test:/\\.(png|svg|jpg|gif)$/，use:['file-loader']}]}plugins:[newCleanWebpackPlugin(['dist'])，]，}",
	"5.请说说前端怎么处理网络性能优化？": "1.减少http请求次数:页面存在多个http请求，考虑是否可以合并为一次请求2.缓存策略：设置cache-control，或Etag、last-modify，expires，将服务端资源缓存到本地，减少请求次数。3.SSR:将页面的资源都在服务端加载，请求时直接返回的一整个html资源。4.图片懒加载：根据首屏的可视范围，决定是否请求图片资源。5.精灵图:将多个图片整合成一张图，减少http请求次数，同时缩小图片体积。6.webp图片取代jpg/png:webp格式的图片有更小的体积，同时保证质量。"
}, {
	"姓名": "陈国团",
	"编号": "310",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "实现：把路由对应的组件打包成一个个的js代码块，只有在该路由被访问时，才会加载对应的组件代码块。1、vue异步加载{path:'/xxx'，name:'xxx'，component:resolve=>require(['组件路径']，resolve)}2、importconstComponentName=()=>import('组件路径'){path:'/xxx'，name:'xxx'，component:ComponentName}3、webpack提供的require.ensure{path:'/xxx'，name:'xxx'，component:r=>require.ensure(['需要使用的依赖']，()=>r(require('组件路径')，'单独打包的chunk文件名')}",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "实现：把路由对应的组件打包成一个个的js代码块，只有在该路由被访问时，才会加载对应的组件代码块。1、vue异步加载{path:'/xxx'，name:'xxx'，component:resolve=>require(['组件路径']，resolve)}2、importconstComponentName=()=>import('组件路径'){path:'/xxx'，name:'xxx'，component:ComponentName}3、webpack提供的require.ensure{path:'/xxx'，name:'xxx'，component:r=>require.ensure(['需要使用的依赖']，()=>r(require('组件路径')，'单独打包的chunk文件名')}",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、在可使用数据变化，dom自动变化的情况下，仍直接操作DOM。2、频繁触发重绘、回流的代码。3、不封装代码或组件，相似甚至相同的代码重复写多次。",
	"4.在Webpack中，如何配置loader和plugin": "1、loader：在module:{rules:[]}中rules写入一个个对象。每个对象中，test为需要匹配的文件；exclide为排除在外的文件；include为需要匹配的文件；只需要一个loader时可使用loader；需要使用多个loader时使用use，传入一个数组，该数组中loader使用顺序为从下到上、从右到左；enforce为执行顺序，options为配置项。如需要配置项中只有一个起作用，可以使用oneOf:[]，把配置写入该数组中。2、plugin：在plugins:[]中。该数组中传入plugin实例，newXXX()，XXX为plugin名字，小括号()中可传入配置项，具体需查看该plugin使用文档。",
	"5.请说说前端怎么处理网络性能优化？": "1、使用CSS雪碧图，减少http的请求数。2、小图片转成base64格式，减小图片请求大小。3、使用CDN内容分发网络。4、减少DNS域名系统查询。5、使用Gzip压缩。6、使用强缓存（Expires、Cache-Control）、协商缓存（Last-Modified&If-Modified-Since、ETags&If-None-Match）。7、避免重定向。"
}, {
	"姓名": "香起虹",
	"编号": "309",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter通过使用webpack提供的import()方法来实现按需加载路由组件。具体实现步骤：1.在路由配置中，将需要懒加载的路由组件使用import()进行动态导入。2.将路由映射表中对应的组件属性设置为返回使用import()函数动态导入的组件的函数。3.当用户访问该懒加载路由时，VueRouter会在需要时异步地加载并渲染该组件。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter通过使用webpack提供的import()方法来实现按需加载路由组件。具体实现步骤：1.在路由配置中，将需要懒加载的路由组件使用import()进行动态导入。2.将路由映射表中对应的组件属性设置为返回使用import()函数动态导入的组件的函数。3.当用户访问该懒加载路由时，VueRouter会在需要时异步地加载并渲染该组件。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁的dom操作2.发送大量http请求3.使用不必要的JavaScript库和框架4.未优化的图片资源：大量、过大的图片资源也会拖慢页面的加载速度，因此，在使用图片时，应该尽量压缩图片大小。必要时使用图片懒加载",
	"4.在Webpack中，如何配置loader和plugin": "在Webpack中，可以通过配置module.rules来配置loader，通过配置plugins来配置plugin",
	"5.请说说前端怎么处理网络性能优化？": "1.尽可能减少http请求次数2.压缩静态资源大小3.按需加载资源4.图片懒加载优化5.减少频繁的dom操作6.使用浏览器缓存减少请求次数"
}, {
	"姓名": "张小萍",
	"编号": "308",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "vue-router路由懒加载1import（）2vue的异步加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "vue-router路由懒加载1import（）2vue的异步加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "使用很多临时变量，代码重复性高，代码嵌套多，不做节流，防抖操作，形成闭包，多次使用的数据不缓存",
	"4.在Webpack中，如何配置loader和plugin": "loader配置在module的rules里主要配置rule的条件以及rule的loaderplugin在webpack.config.js文件中通过webpackde的plugins属性进行配置plugins是一个数组，其元素是插件对象的实例",
	"5.请说说前端怎么处理网络性能优化？": "减少http网络请求，设置浏览器缓存策略"
}, {
	"姓名": "樊建强",
	"编号": "307",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.懒加载有三种方式：第一种是vue的异步加载技术，第二种是es6标准语法import方法，第三种是webpack的require。按需加载路由也就两种方式require和es6的import方式。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.懒加载有三种方式：第一种是vue的异步加载技术，第二种是es6标准语法import方法，第三种是webpack的require。按需加载路由也就两种方式require和es6的import方式。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "比如Http请求和缓存太多，每帧处理的Update方法不对或繁琐，事件机制不同，字符串的处理方式，文件读写能力，序列化和反序列号，循环遍历等等，还有就是比较复杂的算法执行。都会引起很多性能问题。",
	"4.在Webpack中，如何配置loader和plugin": "对于loader可以通过rules去匹配，loader本身就是个函数，当webpack解析资源的时候，会调用相关的loader去处理，将接受到的文本内容作为参数，将处理后的内容进行返回出去。Plugin是通过扩展webpack功能，加入自定义的构建行为，使的webpack可以执行更广泛的任务。在编译代码过程中，会触发一系列的钩子事件，插件所做的就是找到相应的钩子，往上面挂上自己的任务，也就是注册事件，当webpack构建的时候，插件注册的事件就会随着钩子的触发而执行了。",
	"5.请说说前端怎么处理网络性能优化？": "1.尽量减少HTTP的请求次数，2.减少DNS查找次数，3.避免跳转，4.可缓存的AJAX，5.推迟加载内容，6.实施预加载，7.减少DOM元素数量，8.根据域名划分页面内容，9.使iframe的数量最小，10.不要出现404错误，11.使用内容分发网络，12.Gzip压缩文件内容。"
}, {
	"姓名": "陈志富",
	"编号": "306",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "通过Webpack的动态import语法来实现。import()函数会按需加载对应路径的模块，并返回一个Promise对象。当路由跳转到对应路径时，才会触发加载和渲染该组件。这样就可以将路由组件的加载过程延迟到需要使用它们的时候，从而提高页面的性能和用户体验。另外，VueRouter还支持使用异步组件结合webpack的require.ensure来实现路由懒加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "通过Webpack的动态import语法来实现。import()函数会按需加载对应路径的模块，并返回一个Promise对象。当路由跳转到对应路径时，才会触发加载和渲染该组件。这样就可以将路由组件的加载过程延迟到需要使用它们的时候，从而提高页面的性能和用户体验。另外，VueRouter还支持使用异步组件结合webpack的require.ensure来实现路由懒加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、大量、复杂的DOM操作：频繁进行DOM操作会消耗大量的CPU时间和内存资源，并可能导致页面卡顿或崩溃。2、过多的HTTP请求：过多的HTTP请求会增加网络负载，降低页面加载速度，影响用户体验。应该合理使用缓存、压缩等技术来优化网络请求。3、频繁的重绘与回流：频繁修改元素的样式属性会触发浏览器的重绘与回流操作，从而降低页面渲染性能。建议尽量减少操作次数、避免修改布局属性等。4、模块加载过慢：当项目规模较大时，页面需要加载大量的JavaScript和CSS文件，其中部分文件可能包含大量的代码和依赖项。如果模块加载过慢，则会影响整个页面的加载速度和性能。5、内存泄漏：内存泄漏会导致页面占用的内存不断增加，最终导致浏览器崩溃或系统资源不足。应该注意释放不再使用的对象、避免循环引用、避免过度绑定事件等。6、不合理的算法与数据结构：在处理大量数据时，应该选择合适的算法与数据结构，避免需要耗费较多时间和空间资源来完成相同的操作。7、缺乏代码优化：缺乏代码优化会导致代码冗长、重复、难以维护，并可能导致性能下降。应该遵循一些最佳实践、使用工具进行代码分析与测试等。",
	"4.在Webpack中，如何配置loader和plugin": "在Webpack配置文件中，可以使用module.rules数组来配置loader，在里面定义匹配需要处理的文件类型和使用哪些loader进行转换；可以使用plugins数组来配置plugin，将配置项写入其中。",
	"5.请说说前端怎么处理网络性能优化？": "1、减少HTTP请求：通过合并文件、压缩文件、使用字体图标等方式来减少页面请求次数，从而提升页面加载速度。2、使用缓存：利用浏览器缓存和服务器缓存来减少页面资源的请求时间。可以通过设置响应头的Cache-Control和Expires属性来控制缓存策略。3、压缩文件：JavaScript、CSS和HTML文件可以通过压缩来减小文件大小，从而提升页面加载速度。可以使用Webpack、Gulp等工具来实现自动化压缩。4、图片优化：图片是页面中最大的资源消耗者之一，可以通过压缩图片、选择合适的图片格式等方式来减小图片大小，从而提升页面加载速度。5、使用CDN加速：可以使用CDN（内容分发网络）来加速页面资源的获取速度，从而提升页面加载速度。将静态资源部署到CDN上，可以使用户在访问资源时获取更快的响应。6、资源预加载与懒加载：可以使用资源预加载和懒加载的方式来优化网页加载速度。资源预加载可以在需要使用某些资源前就提前加载，从而避免等待时间；懒加载可以在用户需要使用某些资源时再进行加载，从而减少页面初始加载的大小。7、减小文件大小：可以通过使用TreeShaking、CodeSplitting、按需加载等技术来减小JavaScript文件的大小。CSS可以使用PurifyCSS等工具来删除不需要的样式代码。8、避免重定向：页面的重定向会消耗额外的请求时间，应该尽量避免使用重定向。9、资源合并：将多个CSS或JS文件合并为一个文件，可以减少HTTP请求次数，提高页面加载速度。"
}, {
	"姓名": "林志坚",
	"编号": "305",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "一般使用es6新语法import会很方便简洁在需要使用到的时候才进加载对应的组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "一般使用es6新语法import会很方便简洁在需要使用到的时候才进加载对应的组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "代码多处重复图片路由不使用懒加载多处遍厉功能相似的组件或者逻辑不封装抽离",
	"4.在Webpack中，如何配置loader和plugin": "暂时还没有涉及到这个领域，一般是组长或者架构处理",
	"5.请说说前端怎么处理网络性能优化？": "减少http请求路由图片使用懒加载外部资源使用CDN导入长链接使用懒加载函数防抖函数节流减少js代码中全局变量html标签语义化功能相似的组件或逻辑可以抽离封装"
}, {
	"姓名": "欧阳大雄",
	"编号": "304",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "打包成一个js文件，在import引入，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "打包成一个js文件，在import引入，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "请求过多，操作真实dom，没有做性能优化，代码重复，没有复用，图片过大，图片懒加载，v-for没有加key，跟v-if一起使用，没有分包，代码体积过大，没有使用路由懒加载以及页面按需加载等等",
	"4.在Webpack中，如何配置loader和plugin": "安装依赖，在webpack.config.js中module.rules配置loader，按照从右到左（或从下到上）的顺序执行安装，以一个html文件为模板，生成一个html文件，并将打包生成的js文件注入当中",
	"5.请说说前端怎么处理网络性能优化？": "1、减少HTTP请求：通过将多个前端资源合并成一个实现减少HTTP请求提高性能。2、设置响应头字段是部分及时性要求不高的静态资源在缓存在前端浏览器中。3、启用传输压缩。例如gzip。4、合理的布局前端代码结构，css，html，js代码的顺寻由上至下。5、对于一些可公开访问的资源，可以通过设置其他的域名的方式减少传输过程中的cookie。6、使用CDN分发，将静态资源部署在各大网络运营商的机房中，这样子用户就可以非常快的就近获得资源。7、使用反向代理将热门内容，静态资源或者一些可被缓存的计算结果缓存在代理服务器中。通过配置代理服务器可以实现代理服务器直接转发被缓存的资源。"
}, {
	"姓名": "谢广",
	"编号": "303",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "vue异步组件技术====异步加载，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。constLogin=()=>import(\"../views/Login.vue\")",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "vue异步组件技术====异步加载，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。constLogin=()=>import(\"../views/Login.vue\")",
	"3.在前端开发中，什么样的代码会导致性能很低？": "代码的结构复杂度太高，代码不简洁，代码错乱不正确，没有用到的代码遗留没有删除。",
	"4.在Webpack中，如何配置loader和plugin": "module.exports={module:{rules:[{test:/\\.css/，use:[{loader:MiniCssExtractPlugin.loader//涉及到内容装转换}，'css-loader']}]}plugins:[//extractcssintoitsownfile//Errorcontenthashnotimplementedwithwebpack>4.3.0//1.yarnupgradeextract-text-webpack-plugin@next//2.采用mini-css-extract-pluginnewMiniCssExtractPlugin({//因为webpack4.3包含了contenthash这个关键字，所以ExtractTextPlugin中不能使用contenthash//使用md5:contenthash:hex:8代替contenthash//githubissuehttps://github.com/webpack-contrib/extract-text-webpack-plugin/issues/765filename:'css/[name].[contenthash].css'，//Settingthefollowingoptionto`false`willnotextractCSSfromcodesplitchunks.//TheirCSSwillinsteadbeinserteddynamicallywithstyle-loaderwhenthecodesplitchunkhasbeenloadedbywebpack.//It'scurrentlysetto`true`becauseweareseeingthatsourcemapsareincludedinthecodesplitbundleaswellwhenit's`false`，//increasingfilesize:https://github.com/vuejs-templates/webpack/issues/1110allChunks:true，})]}",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTTP请求数:这条策略是最重要最有效的，因为一个完整的请求要经过DNS寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。合并多个CSS文件和js文件，利用CSSSprites整合图像，InlineImages(使用data：URLscheme在实际的页面嵌入图像数据)，合理设置HTTP缓存等。2.减少DNS查找3.避免重定向4.使用Ajax缓存5.延迟加载组件，预加载组件6.减少DOM元素数量:页面中存在大量DOM元素，会导致javascript遍历DOM的效率变慢。7.避免404：HTTP请求时间消耗是很大的，因此使用HTTP请求来获得一个没有用处的响应（例如404没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。8.减小Cookie大小9.针对Web组件使用域名无关的Cookie10.通过CSSSprites优化图片11.不要在HTML中使用缩放图片12.从分利用缓存"
}, {
	"姓名": "唐帅",
	"编号": "302",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.在配置路由的时候在component配置项使用()=>import(路由页面路径)2.resolve=>require([路由页面路径]，resolve)",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.在配置路由的时候在component配置项使用()=>import(路由页面路径)2.resolve=>require([路由页面路径]，resolve)",
	"3.在前端开发中，什么样的代码会导致性能很低？": "未声明的全局变量大量的操作dom遗忘的定时器延时器闭包一次性发起多个请求",
	"4.在Webpack中，如何配置loader和plugin": "loader用于对模块的源代码进行转换，loader可以将文件从不同的语言转化成浏览器认识的语言例如配置解析css代码{test:/\\.css$/，use:['style-loader'，'css-loader']}}plugin扩展webpack本身的一些功能，它们会运行在各种模块解析完成以后的打包编译阶段例如HtmlWebpackPlugin配置生成的html文件并将js模块引入该html中plugins:[newHtmlWebpackPlugin({filename:\"app.html\"，//打包后的网页名称template:\"./src/html/index.html\"//目标网页})]",
	"5.请说说前端怎么处理网络性能优化？": "在请求头添加时间戳减少请求次数"
}, {
	"姓名": "吕福龙",
	"编号": "301",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在路由文件中配置相关代码。即可实现子路由的懒加载。根据访问的子路由按需加载。仅加载访问的子路由下关联组件。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在路由文件中配置相关代码。即可实现子路由的懒加载。根据访问的子路由按需加载。仅加载访问的子路由下关联组件。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "嵌套地狱。多次遍历大量数据。同一节点，大量后台请求。业务逻辑复杂繁琐。",
	"4.在Webpack中，如何配置loader和plugin": "config.json中放入需要的配置地址。package.json文件中编写打包启动等相关指令便于一键启动。以及存放依赖版本根据此自动安装相关依赖。",
	"5.请说说前端怎么处理网络性能优化？": "减少不必要的后台请求。"
}, {
	"姓名": "赖洪江",
	"编号": "300",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用动态引入，例如：constroutes=[{path:'/about'，component:()=>import('./views/About.vue')}，//...]",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用动态引入，例如：constroutes=[{path:'/about'，component:()=>import('./views/About.vue')}，//...]",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.大量的DOM操作：频繁的DOM操作会导致页面重绘和回流，从而降低页面的性能。2.频繁的网络请求：过多的网络请求会消耗带宽和服务器资源，从而导致页面加载缓慢。3.大量的循环和递归：复杂的循环和递归会占用大量的CPU资源，从而导致页面卡顿。4.大量的全局变量和函数：过多的全局变量和函数会导致命名冲突和内存泄漏，从而影响页面的性能。5.大量的重复代码：重复的代码会增加代码量，降低代码的可读性和可维护性，同时也会影响页面的性能。6.过多的事件监听：过多的事件监听会导致页面响应缓慢，甚至造成页面卡死。7.不合理的数据绑定：过度的数据绑定会导致数据监听器过多，从而降低页面的性能。8.过多的图片和媒体资源：过多的图片和媒体资源会增加页面加载时间，从而影响页面的性能。9.大量的复杂动画：过多的复杂动画会占用大量的CPU和GPU资源，从而影响页面的性能。10.过多的插件和库：过多的插件和库会增加页面的加载时间和内存占用，从而影响页面的性能。",
	"4.在Webpack中，如何配置loader和plugin": "以下是一个file-loader和html-webpack-plugin的配置：constHtmlWebpackPlugin=require('html-webpack-plugin');constpath=require('path');module.exports={entry:['./src/index.js']，output:{filename:'[name].[contenthash].bundle.js'，}，plugins:[newHtmlWebpackPlugin({title:'Customtemplate'，template:'index.html'})]，module:{rules:[{test:/\\.(png|jpe?g|gif)$/i，use:[{loader:'file-loader'，}，]，}，]，}，};",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTTP请求：将多个小的静态资源合并成一个，减少HTTP请求次数；使用CSSSprites将多个小图片合成一张图片，减少HTTP请求次数；使用字体图标替代小图片，减少HTTP请求次数。2.使用缓存：对于不经常变化的资源，设置强缓存和协商缓存，让浏览器直接使用缓存，减少HTTP请求次数。3.压缩资源：对JS、CSS、HTML等静态资源进行压缩，减小文件大小，加快资源加载速度。4.使用CDN加速：使用CDN可以让用户从离用户最近的节点获取资源，减少请求时间。5.按需加载：将页面中的资源分为首屏和非首屏资源，对于非首屏资源可以使用懒加载或者按需加载的方式进行加载，减少首屏加载时间。6.DNS预解析：通过设置dns-prefetch等meta标签或者在代码中使用dns-prefetch使浏览器在页面加载完成后预先解析一些域名，提前获取域名对应的IP地址，减少DNS解析时间。7.减少DOM操作：DOM操作很耗费性能，尽量避免频繁的DOM操作，尽量使用批量更新的方式进行DOM操作。8.减少重排和重绘：对于频繁进行重排和重绘的操作，可以使用requestAnimationFrame进行优化，减少重排和重绘的次数。9.延迟加载：对于非关键资源，可以使用延迟加载的方式进行加载，提高首屏渲染速度"
}, {
	"姓名": "栗电奇",
	"编号": "299",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "Vue-router采用()=>import('组件路径')的方式进行路由懒加载。当我们通过router-link或者this.$router.push()去跳转路由才会加载响对应路由页面。采用路由懒加载的模式可以减少初始加载体积：只加载当前需要的部分代码，可以避免一次性加载所有代码，提升应用初次加载速度。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "Vue-router采用()=>import('组件路径')的方式进行路由懒加载。当我们通过router-link或者this.$router.push()去跳转路由才会加载响对应路由页面。采用路由懒加载的模式可以减少初始加载体积：只加载当前需要的部分代码，可以避免一次性加载所有代码，提升应用初次加载速度。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁的DOM操作，频繁的创建、更新和删除DOM元素，会导致页面重绘和回流，影响页面性能。2.http请求过多。3.定时器未清除。4.缺少资源压缩和缓存，JavaScript、CSS和图片等资源缺少压缩和缓存，会导致页面加载时间延长和网络资源浪费",
	"4.在Webpack中，如何配置loader和plugin": "在webpack.config.js文件中，添加对应的loader配置在webpack.config.js文件中，添加对应的plugin配置通过配置loader和plugin，可以满足前端项目的多样化需求，提高前端项目的生产效率和质量。",
	"5.请说说前端怎么处理网络性能优化？": "1.减少Http请求2.压缩静态资源文件3.采用浏览器缓存4.采用懒加载的模式5.优化图片，采用图片懒加载或减小图片大小采用精灵图6.使用CDN加速"
}, {
	"姓名": "梁林斌",
	"编号": "298",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "懒加载：在路由配置文件中以import函数动态加载组件。按需：使用webpack打包时会将组件打包为一个单独的代码块，只有访问时，才会加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "懒加载：在路由配置文件中以import函数动态加载组件。按需：使用webpack打包时会将组件打包为一个单独的代码块，只有访问时，才会加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.存在嵌套过深的dom元素2.js中存在大量的递归和循环操作3.存在大量的http请求4.加载的图片过大5.没有缓存数据的操作6.大量css内联样式",
	"4.在Webpack中，如何配置loader和plugin": "1.使用包管理器下载队友的loader或者plugin2.在webpack配置文件中的module里的rule配置对应的loader解析规则，在use里写对应的loader3.使用require引入对应的plugin后，在plugin里配置规则",
	"5.请说说前端怎么处理网络性能优化？": "1.请相关负责人给请求接口开启gzip2.压缩资源文件3.使用cdn4.使用缓存5.减少http请求6.使用异步加载页面资源"
}, {
	"姓名": "黄建芳",
	"编号": "297",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "有三种方法可以实现1.vue异步组件：vue-router配置路由，使用vue的异步组件技术，可以实现懒加载，此时一个组件会生成一个js文件，component:resolve=>require(['放入需要加载的路由地址']，resolve)2.ES6的import（）比较推荐3.webpack的require，ensure（）VueRouter按需加载路由组件的VueRouter可以通过异步组件和webpack的codesplitting特性来实现路由的按需加载在定义路由的时候，使用component属性指定一个函数，该函数返回一个import()动态加载组件的语法代码：constrouter=newVueRouter({routes:[{path:'/home'，component:()=>import('./Home.vue')}，{path:'/about'，component:()=>import('./About.vue')}]})",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "有三种方法可以实现1.vue异步组件：vue-router配置路由，使用vue的异步组件技术，可以实现懒加载，此时一个组件会生成一个js文件，component:resolve=>require(['放入需要加载的路由地址']，resolve)2.ES6的import（）比较推荐3.webpack的require，ensure（）VueRouter按需加载路由组件的VueRouter可以通过异步组件和webpack的codesplitting特性来实现路由的按需加载在定义路由的时候，使用component属性指定一个函数，该函数返回一个import()动态加载组件的语法代码：constrouter=newVueRouter({routes:[{path:'/home'，component:()=>import('./Home.vue')}，{path:'/about'，component:()=>import('./About.vue')}]})",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.大量的同步请求：同步请求会阻塞浏览器的进程，导致页面响应缓慢。而异步请求则不会，可以提高页面的响应速度2.大量的DOM操作：频繁的DOM操作会导致页面的重绘和回流，影响页面的性能。可以通过批量操作DOM、使用虚拟DOM等方式来优化3.大量的JavaScript代码：大量的JavaScript代码会影响页面的加载速度和响应速度。可以通过代码压缩、减少依赖库等方式来优化4.不合理的图片处理：大量的图片会影响页面的加载速度，不合理的图片处理也会影响页面的性能。可以通过图片压缩、使用适当的图片格式等方式来优化5.不合理的CSS处理：大量的CSS会影响页面加载速度，不合理的CSS处理也会影响页面的性能。可以通过CSS压缩、使用合适的选择器等方式来优化6.不合理的缓存处理：缓存可以提高页面加载速度，但不合理的缓存处理也会影响页面的性能。可以通过合理的缓存策略来优化",
	"4.在Webpack中，如何配置loader和plugin": "先npm下载在webpack配置文件中，使用module.rules配置loadermodule.exports={module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}，{test:/\\.js$/，use:'babel-loader'}]}}配置plugin：constHtmlWebpackPlugin=require('html-webpack-plugin');module.exports={plugins:[newHtmlWebpackPlugin({template:'./src/index.html'})]}",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTTP请求：将多个CSS和JavaScript文件合并为一个文件，使用CSSSprites合并图片，减少页面的HTTP请求次数2.压缩文件：对CSS、JavaScript和HTML文件进行压缩，可以减少文件大小，提高页面加载速度3.使用缓存：对经常访问的资源使用缓存，可以减少网络传输的数据量，提高页面的响应速度4.DNS预解析：使用DNS预解析技术，可以在页面加载时预先解析网站可能需要的域名，减少DNS查询时间，提高页面加载速度5.压缩图片：对图片进行压缩，可以减小图片大小，提高页面加载速度6.懒加载：对于页面中一些不必要立即加载的资源（如图片、视频），可以使用懒加载技术，将其延迟加载，提高页面的响应速度7.预加载：对于一些预计会在未来访问的资源，可以使用预加载技术，提前下载并缓存资源，减少页面加载时间"
}, {
	"姓名": "刁惠淼",
	"编号": "296",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "答：有三种实现方式第一种：vue异步组件，异步加载，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。第二种：路由懒加载(使用import)。第三种：webpack提供的require.ensure()，vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "答：有三种实现方式第一种：vue异步组件，异步加载，vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。第二种：路由懒加载(使用import)。第三种：webpack提供的require.ensure()，vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "答：1、过多的请求HTTP。2、引入无关的插件，代码冗余。3、过多的引入重复css、js、组件。4、同步和异步的问题。5、把过多的计算任务放在前端处理，前后端处理不合理，过多处理计算交给前端。6、页面加载性能问题主要集中于下载关联的静态文件，比如CSS、JS、图片等，这些网络请求对网页加载影响最大",
	"4.在Webpack中，如何配置loader和plugin": "答：loader配置1、安装依赖：cnpminstallcss-loaderstyle-loader-D2、loader安装后，无需引入直接在webpack的配置文件中的module中的rules数组中使用，3、loader的执行是异步的（等后一个执行完才执行前一个），执行顺序是从后往前//loader处理：webpack只认识.js.json文件，其他文件需要在此处做处理module:{rules:[{test:/\\.css$/，//正则检测本地的.css后缀文件use:[{loader:\"style-loader\"，options:{}}，{loader:\"css-loader\"}]，//loader执行是异步的，顺序是从后往前，options中放置参数}，]，}，plugin配置1、安装依赖：cnpminstallclean-webpack-plugin-D2、plugin安装后，先require引入、然后在plugins数组中中实例化const{CleanWebpackPlugin}=require(\"clean-webpack-plugin\");plugins:[newCleanWebpackPlugin()]，//插件，非loader的处理",
	"5.请说说前端怎么处理网络性能优化？": "答：1、尽量减少HTTP请求。2、资源压缩与合并。3、使用内容传送网络CDN。4、避免空src或者href值。"
}, {
	"姓名": "谢松健",
	"编号": "295",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由分hash模式和history模式，两者区别在于url，带#，也就是锚点的是hash模式，hash模式：使用他作为路由的原因是因为他不会刷新跳转页面，可以通过hashchange事件拿到变更的回调，从而执行组件的切换history模式主要是利用h5historyapi的statechang事件回调做组件的切换，有个问题就是刷新会给服务端发请求，没有对应html就会404，需要服务端会与非根路径请求做特俗处理按需加载路由的方式按需加载其实就是利用esmodule的import关键字实现的，由于浏览器不支持import，一般是通过构建工具对import做函数实现具体实现就是，import一个文件的时候，实际就是创建一个script标签对资源进行引用，而这个资源在webpack打包是就已经基于importt语法做了单独抽离，他会是单独的js文件，引入这个文件就可以执行脚本，达到替换组件的目的",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由分hash模式和history模式，两者区别在于url，带#，也就是锚点的是hash模式，hash模式：使用他作为路由的原因是因为他不会刷新跳转页面，可以通过hashchange事件拿到变更的回调，从而执行组件的切换history模式主要是利用h5historyapi的statechang事件回调做组件的切换，有个问题就是刷新会给服务端发请求，没有对应html就会404，需要服务端会与非根路径请求做特俗处理按需加载路由的方式按需加载其实就是利用esmodule的import关键字实现的，由于浏览器不支持import，一般是通过构建工具对import做函数实现具体实现就是，import一个文件的时候，实际就是创建一个script标签对资源进行引用，而这个资源在webpack打包是就已经基于importt语法做了单独抽离，他会是单独的js文件，引入这个文件就可以执行脚本，达到替换组件的目的",
	"3.在前端开发中，什么样的代码会导致性能很低？": "css样式的设置没有统一，而是逐个设置不经意的getStyleComputedclientWidth这种属性的调用会造成回流某个业务js占用过高，且使用setInterval做动画时，会出现卡顿js处理大数据时，时间复杂度问题，尽量降低时间复杂度，对应大数据的处理也可以放webworker进行处理意外的变量造成内存泄漏，导致内存捉急，也会卡页面",
	"4.在Webpack中，如何配置loader和plugin": "module.exports={rules:[{test:/.js$/，loader:'babe-loader'}]，plugins:[newHtmlWebpackPlugin()]}",
	"5.请说说前端怎么处理网络性能优化？": "利用好浏览器最大tcp请求的限制，可以对资源进行单独部署，静态服务器方案，cdn方案，避免再次http阻塞带来的问题有条件可以使用http2，他不像1那样是文本信息，传输体积会小很多，传输速度可以提升对于资源，看情况使用强缓存或者协商缓存，具体就是设置对应响应头，浏览器就会根据他使用对应缓存策略gzip压缩也是一种方案"
}, {
	"姓名": "郑焕忠",
	"编号": "294",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "constxxx=()=>import('../components/xxx')把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "constxxx=()=>import('../components/xxx')把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁的dom操作2.频繁的重绘重排3.代码不规范4.大量https请求5.没有采用浏览器缓存",
	"4.在Webpack中，如何配置loader和plugin": "loader：在module.rules数组中配置各种类型文件的解析规则plugin：在plugins数组中配置各种插件完成各种任务",
	"5.请说说前端怎么处理网络性能优化？": "1.减少https请求2.采用g-zip压缩代码3.cdn加速4.图片资源去熊猫上面压缩下，再放服务器或者本地5.使用缓存6.使用异步加载"
}, {
	"姓名": "梁华",
	"编号": "293",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.VueRouter可以通过懒加载来优化路由组件的加载，以提高应用程序的性能。在懒加载中，只有在该路由被访问时才会加载所需的组件，而不是在应用程序加载时一次性加载所有路由组件。VueRouter支持使用import()函数来异步加载组件。当在路由配置中定义一个组件时，可以使用import()函数来加载。为了让路由能够异步加载组件，可以在路由配置中将组件定义为一个函数，该函数返回一个Promise对象。当路由被访问时，VueRouter将自动调用该函数并等待Promise对象解析完成，然后将其解析为组件。当路由跳转到/(不同的路径)时，VueRouter将自动调用该函数并异步加载相应的组件。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.VueRouter可以通过懒加载来优化路由组件的加载，以提高应用程序的性能。在懒加载中，只有在该路由被访问时才会加载所需的组件，而不是在应用程序加载时一次性加载所有路由组件。VueRouter支持使用import()函数来异步加载组件。当在路由配置中定义一个组件时，可以使用import()函数来加载。为了让路由能够异步加载组件，可以在路由配置中将组件定义为一个函数，该函数返回一个Promise对象。当路由被访问时，VueRouter将自动调用该函数并等待Promise对象解析完成，然后将其解析为组件。当路由跳转到/(不同的路径)时，VueRouter将自动调用该函数并异步加载相应的组件。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁的DOM操作:DOM操作是非常消耗性能的，因为每次操作都会导致页面重绘和重排。频繁的DOM操作会使页面变得缓慢，影响用户体验2.大量的HTTP请求：如果页面上有太多的HTTP请求，那么页面加载速度会非常缓慢。这个问题可以通过将多个请求合并为一个请求来解决，或者使用CDN来缓存静态资源3.大量的JavaScript代码：JavaScript是单线程的，当执行大量的JavaScript代码时，页面可能会出现卡顿的现象。为了避免这种情况，可以将JavaScript代码拆分成小的模块，或者使用异步加载4.不合理的图片处理：加载大尺寸的图片或者过多的图片会导致页面加载速度缓慢。为了避免这个问题，可以使用图片压缩技术和懒加载技术5.不合理的CSS选择器：复杂的CSS选择器可能会导致页面渲染缓慢。为了避免这个问题，可以尽量使用简单的CSS选择器，或者减少选择器的嵌套层级7.当程序中的实例数量过多时，可能会导致性能问题，内存泄漏：如果程序中的实例没有被妥善处理，可能会导致内存泄漏，从而降低系统的性能，大量的无用实例：有些程序中可能会生成大量的无用实例，这些实例没有实际的用处，但却占据了系统资源。频繁的实例生成和销毁：如果程序中需要频繁生成和销毁实例，可能会导致系统性能下降。编写程序时，应该尽可能减少实例的数量，尽可能避免实例生成过多的问题。",
	"4.在Webpack中，如何配置loader和plugin": "在Webpack中，loader用于将非JavaScript类型的模块转换为Webpack可以处理的模块，plugin则用于执行在Webpack打包过程中的一些额外任务。1.首先，在项目根目录下创建一个webpack.config.js文件，并导出一个对象，这个对象包含Webpack配置信息。2.在配置对象中，配置module属性，该属性是一个对象，其中包含了如何处理不同类型的模块的配置信息。在module.rules数组中，配置每个loader的使用规则。Webpack在打包过程中遇到以.css结尾的文件时，会使用style-loader和css-loader将其转换为JavaScript模块，并将其打包到最终的输出文件中；当遇到以.js结尾的文件时，并且不在node_modules目录下，会使用babel-loader将其转换为JavaScript模块。3.配置plugin。在配置对象中，使用plugins属性配置plugin，可以使用HtmlWebpackPlugin的插件，插件用于将一个HTML模板文件作为Webpack打包的入口文件，并生成一个HTML文件，并将生成的文件自动引入打包后的JS文件。具体的配置内容还需要根据实际需求进行调整。",
	"5.请说说前端怎么处理网络性能优化？": "1.压缩和合并文件：压缩和合并CSS、JavaScript、HTML等文件可以减少文件大小，从而提高页面加载速度。2.使用CDN：使用CDN（内容分发网络）可以将静态文件分布到全球各地的服务器上，从而降低服务器的压力和加快页面加载速度。3.DNS预解析：使用DNS预解析可以让浏览器在页面加载前提前解析DNS，从而缩短域名解析的时间。4.资源延迟加载：将页面上不需要立即加载的资源，如图片、视频、广告等，延迟加载可以减少页面的加载时间。可以使用工具如LazyLoad等来实现。5.缓存优化：使用缓存可以减少服务器的请求和响应，从而提高页面加载速度。5.图片优化：使用适当的图片格式和尺寸、压缩图片文件大小等方法可以减少图片的加载时间。6.减少HTTP请求：减少HTTP请求可以降低服务器的压力，从而提高页面加载速度。7.缓存优化：使用缓存可以减少服务器的请求和响应，从而提高页面加载速度。可以使用浏览器的HTTP缓存机制或者第三方缓存工具来实现。"
}, {
	"姓名": "马雪梅",
	"编号": "292",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "(1)vue异步组件、使用import、webpack提供的require.ensure()(2)require.ensure()实现按需加载、vue异步组件技术、webpack提供的require.ensure()",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "(1)vue异步组件、使用import、webpack提供的require.ensure()(2)require.ensure()实现按需加载、vue异步组件技术、webpack提供的require.ensure()",
	"3.在前端开发中，什么样的代码会导致性能很低？": "（1）页面加载性能问题主要集中于下载关联的静态文件，比如CSS、JS、图片等，这些网络请求对网页加载影响最大（2）过多的HTTP请求（3）同步和异步的问题（4）CDN网络访问瓶颈，如果引入了国外的CDN地址那么网络请求必然耗时（5）前端代码的规范，比如随便复制导致引入不必要的组件、CSS和JS位置不规范、重复引入组件（6）把过多的计算任务放在前端处理，前后端处理不合理，过多处理计算交给前端",
	"4.在Webpack中，如何配置loader和plugin": "运行npminstallstyle-loadercss-loader-D安装处理css的loader，在webpack.config.js文件中module.exports下配置",
	"5.请说说前端怎么处理网络性能优化？": "1.减少http请求数2.图片优化3.使用CDN4.开启GZIP5.样式表和JS文件的优化6.使用无cookie域名7.前端代码结构的优化"
}, {
	"姓名": "王小燕",
	"编号": "291",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter的实现原理是:1.利用Vue的异步组件和Webpack的代码分割功能。2.把不同路由对应的组件划分到不同的代码块里。3.只有在需要访问这个路由时才加载对应组件的代码块。constrouter=newVueRouter({routes:[{path:'/foo'，component:()=>import('./Foo.vue')}]})",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter的实现原理是:1.利用Vue的异步组件和Webpack的代码分割功能。2.把不同路由对应的组件划分到不同的代码块里。3.只有在需要访问这个路由时才加载对应组件的代码块。constrouter=newVueRouter({routes:[{path:'/foo'，component:()=>import('./Foo.vue')}]})",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁的的添加，删除DOM节点会导致页面渲染缓慢，降低性能；2.太多的js循环也会导致占用大量CPU资源；3.页面图片资源太多，也会影响页面加载速度；4.过度使用CSS动画等浏览器功能，会导致占用大量CPU资源；5.第三方组件使用不当；",
	"4.在Webpack中，如何配置loader和plugin": "module.exports={module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}]}，plugins:[newHtmlWebpackPlugin()]}",
	"5.请说说前端怎么处理网络性能优化？": "1.服务端优化，使用Gzip压缩、利用浏览器缓存；2.通过懒加载提高首屏加载速度；3.选择体积高效，性能更高的第三方库和框架；4.采用css预处理器、Es6语法编译等打包工具优化代码；5.对css、Javascript、HTML进行压缩。"
}, {
	"姓名": "梁程",
	"编号": "290",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由懒加载是指从传统的页面一打开就去加载所有页面(首屏加载慢)，变成按需加载，他的实现原理利用函数思想，点击才调用，按照需要去加载对应的资源.VueRouter按需加载路由通常用于RBAC，对后端返回的唯一标识配合动态路由匹配进行校验去加载不同组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由懒加载是指从传统的页面一打开就去加载所有页面(首屏加载慢)，变成按需加载，他的实现原理利用函数思想，点击才调用，按照需要去加载对应的资源.VueRouter按需加载路由通常用于RBAC，对后端返回的唯一标识配合动态路由匹配进行校验去加载不同组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多静态资源与节流防抖相关比如过多请求，事件触发声明太多变量，注意复用，频繁操作字符串事件监听用完移除频闭打印复杂计算优先保存到本地重绘与回流",
	"4.在Webpack中，如何配置loader和plugin": "按照文档操作",
	"5.请说说前端怎么处理网络性能优化？": "减少http请求，雪碧图的使用vue动态路由，按需导入js减少重定向使用协商缓存，本地资源与服务器资源无异同就不发送请求避免把href设置为空"
}, {
	"姓名": "黄武强",
	"编号": "289",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "通过import（）函数实现路由懒加载，它返回的是一个promis函数。webpack打包时会把import函数导入的路由打包成一个单独文件，需要时再加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "通过import（）函数实现路由懒加载，它返回的是一个promis函数。webpack打包时会把import函数导入的路由打包成一个单独文件，需要时再加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1大量的重复代码2平凡的操作dom3过多的http请求4大量的计算操作",
	"4.在Webpack中，如何配置loader和plugin": "loader配置是再module.exports对象中的module.loader中，默认情况下webpack只能打包js和json模块loader作用是让webpack可以打包除了js和json模块plugin是再module.export中plugin中（需要下载对应的插件包），plugin是webpack中扩展功能，可以处理webpack中不同的事件",
	"5.请说说前端怎么处理网络性能优化？": "1减少http强求，使用雪碧图2使用CND加速3压缩文件4图片懒加载"
}, {
	"姓名": "李琼仙",
	"编号": "288",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在路由中component属性为（）=>import（“路径”）",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在路由中component属性为（）=>import（“路径”）",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的操作dom，导致回流重回过多；浪费的http请求；复杂的计算；内存的消耗",
	"4.在Webpack中，如何配置loader和plugin": "在webpack.config.js中给rules添加loader相关的对象，引入需要的插件，并进行初始化",
	"5.请说说前端怎么处理网络性能优化？": "减少dom操作，减少http请求，使用缓存，使用懒加载，使用CDN加速，压缩资源"
}, {
	"姓名": "林泽帆",
	"编号": "287",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "按需加载路由组件（即路由懒加载）有三种实现方法:1.vue异步组件在vue-router配置路由，使用vue异步组件技术，就可以实现懒加载2.es6的import（）const组件名=（）=>import（\"组件路径\"）3.webpack提供的require.ensure（）来实现懒加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "按需加载路由组件（即路由懒加载）有三种实现方法:1.vue异步组件在vue-router配置路由，使用vue异步组件技术，就可以实现懒加载2.es6的import（）const组件名=（）=>import（\"组件路径\"）3.webpack提供的require.ensure（）来实现懒加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.过多的http请求2.同步和异步的问题3.前端代码规范4.把过多的计算任务放在前端处理，也会导致性能变低5.页面加载性能问题主要集中于下载关联的静态文件（css，js，图片等），这些网络请求对性能影响最大",
	"4.在Webpack中，如何配置loader和plugin": "1.配置loader新建一个目录，如loader进入目录初始化package.json文件，安装wenpack根目录下新建文件夹src，创建入口文件index.js根目录下新建文件夹loaders，新建自定义Loader.js根目录下新建webpack配置文件webpack.config.js在package.json配置webpack打包build命令2.配置pluginwebpack启动，执行newmyPlugin，初始化插件并获取实例，初始化complier对象，调用complier给插件传入complier对象插件实例获取complier，再通过complier.plugin监听事件，再通过complier对象操作webpack",
	"5.请说说前端怎么处理网络性能优化？": "1.优化网络连接使用cdn使用dns预解析2.优化资源加载3.webpack性能优化打包公共代码动态导入和按需加载删除无用代码长缓存优化公共代码内联"
}, {
	"姓名": "曾嘉亿",
	"编号": "286",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1路由懒加载也叫作延迟加载，使用懒加载可以减少我们第一次打开项目首页的时间，不至于页面出现长时间的白屏，优化用户的体验当打包构建应用时，JavaScript包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。2vue异步组件技术",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1路由懒加载也叫作延迟加载，使用懒加载可以减少我们第一次打开项目首页的时间，不至于页面出现长时间的白屏，优化用户的体验当打包构建应用时，JavaScript包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。2vue异步组件技术",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、重复使用临时变量2、没有正确处理异常",
	"4.在Webpack中，如何配置loader和plugin": "1.在webpack.config.js中指定loader2.安装指定的loader配置npminstall--save-devhtml-webpack-plugin//需引入constHtmlWebpackPlugin=require(\"html-webpack-plugin\");module.exports={plugins:[newHtmlWebpackPlugin({title:\"MyApp\"，filename:\"app.html\"，template:\"./src/html/index.html\"})]};",
	"5.请说说前端怎么处理网络性能优化？": "1、减少http请求数；2、图片优化；3、使用CDN；4、开启GZIP；5、样式表和JS文件的优化；6、使用无cookie域名；7、前端代码结构的优化。"
}, {
	"姓名": "尹国超",
	"编号": "285",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "实现方式：使用ES6的import()方法在router.js将组件引入同时注册，可以实现路由懒加载每个组件打包成一个js文件只有在这个路由被访问到的时候，才会加载对应组件的代码块。同时使用在路径前面指定webpackChuncName，会将相同模块chunkname的组件打包到同一个js包。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "实现方式：使用ES6的import()方法在router.js将组件引入同时注册，可以实现路由懒加载每个组件打包成一个js文件只有在这个路由被访问到的时候，才会加载对应组件的代码块。同时使用在路径前面指定webpackChuncName，会将相同模块chunkname的组件打包到同一个js包。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的操作DOM或者过多重复的代码，重复的计算，以及不必要的网络请求都会影响性能。",
	"4.在Webpack中，如何配置loader和plugin": "Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）Plugin在plugins中单独配置。类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。",
	"5.请说说前端怎么处理网络性能优化？": "1.使用雪碧图，可以减少网站http请求数量2.不使用css@import，使用css@import会造成额外的请求3.避免使用空的src和href，a标签设置空的href，会重定向到当前页面的地址4.使用CDN，打包上线时时使用CDN引入依赖的资源5.路由懒加载，UI组件按需加载"
}, {
	"姓名": "龚良",
	"编号": "284",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "我们把不同路由对应的组件分割成不同的代码模块，然后当访问不同路由时加载不同模块加载对应的组件。可以通过异步加载或者es6import()实现。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "我们把不同路由对应的组件分割成不同的代码模块，然后当访问不同路由时加载不同模块加载对应的组件。可以通过异步加载或者es6import()实现。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "代码冗杂，未能封装多次可以利用的重复代码，懒加载技术未使用！页面很多重回回流现象产生。大量使用全局加载等",
	"4.在Webpack中，如何配置loader和plugin": "通过npm安装打包软件之后，在webpack.config.js中的use对象模块中配置",
	"5.请说说前端怎么处理网络性能优化？": "减少请求次数，雪碧图的使用，动态路由按需导入，使用cdn等"
}, {
	"姓名": "黄燕薇",
	"编号": "283",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在配置路由的时候使用import引入组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在配置路由的时候使用import引入组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "初始加载使用v-show，切换显示使用v-if，在v-for里使用v-if，请求次数很多，插件不管用不用都引入等",
	"4.在Webpack中，如何配置loader和plugin": "百度或者在Webpack官网找",
	"5.请说说前端怎么处理网络性能优化？": "文件压缩，图片尽量使用svg和字体图标，使用浏览器缓存等技术减少请求次数"
}, {
	"姓名": "魏杰",
	"编号": "282",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "通过vue异步组件加载以及es6的imprort方式引入VueRouter本身有两种模式一种hash一种是History模式hash地址栏带#号history不带hash模式下是通过路径变化，然后会触发hashchange事件，在hashchange事件中记录当前路由地址，并找到当前路由对应的组件，重新渲染在浏览器中。history通过history.pushState()方法来改变地址栏，并把当前地址记录在浏览器的访问历史中，并不会真正的跳到指定的路径，也就是浏览器不会向服务器发送请求",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "通过vue异步组件加载以及es6的imprort方式引入VueRouter本身有两种模式一种hash一种是History模式hash地址栏带#号history不带hash模式下是通过路径变化，然后会触发hashchange事件，在hashchange事件中记录当前路由地址，并找到当前路由对应的组件，重新渲染在浏览器中。history通过history.pushState()方法来改变地址栏，并把当前地址记录在浏览器的访问历史中，并不会真正的跳到指定的路径，也就是浏览器不会向服务器发送请求",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、不清除定时器2、多层重复的for循环3、过多的HTTP请求4、大量的图片以及css和htm等一些静态资源",
	"4.在Webpack中，如何配置loader和plugin": "npm可以下载各种loader来在webpack.config.js进行配置",
	"5.请说说前端怎么处理网络性能优化？": "1、减少http接口请求2、减少dom数量3、使用CDN进行静态资源缓存单独分离4、减少代码冗余"
}, {
	"姓名": "莫坚伟",
	"编号": "281",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用动态导入：这是一种ES6的语法，可以让Webpack将代码分割成不同的块，并在需要时才加载。constFoo=()=>import('./Foo.vue')routes:[{path:'/foo'，component:Foo}]",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用动态导入：这是一种ES6的语法，可以让Webpack将代码分割成不同的块，并在需要时才加载。constFoo=()=>import('./Foo.vue')routes:[{path:'/foo'，component:Foo}]",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.页面过多的网络请求2.未经压缩或优化的图片、视频3.闭包或者计时器等使用完后不销毁4.大量的DOM操作。5.比如在循环中进行复杂的计算或者判断，或者在事件处理函数中执行耗时的操作，或者在动画效果中使用JS而不是CSS等，这些代码会消耗大量的CPU资源，导致页面卡顿或者无响应。应该尽量优化算法和逻辑，避免不必要的计算和判断，使用WebWorker等异步和离线处理，使用requestAnimationFrame或者debounce等技术优化动画和事件等。",
	"4.在Webpack中，如何配置loader和plugin": "1.在webpack.config.js文件中，使用module.rules数组来配置loader。每个rule对象包含test、use、include、exclude等属性，用于匹配模块和指定使用的loader。2.在webpack.config.js文件中，使用plugins数组来配置plugin。每个plugin都是一个构造函数的实例，需要使用new操作符来创建，并且可以传入一些参数。",
	"5.请说说前端怎么处理网络性能优化？": "1.减少请求数量：通过合并CSS和JS文件、减少图片数量、使用字体图标等方式减少HTTP请求次数，从而提高页面的加载速度。2.图片优化：优化图片大小及格式，使用图片懒加载和预加载等方式，减少页面的加载时间。3.使用CDN加速：使用CDN加速可以使请求的资源更快地被加载，从而提高页面的速度。4.异步加载：使用defer、async属性、动态创建script标签等方式异步加载JavaScript文件，减少页面的加载时间。5.避免重排和重绘：重排和重绘会使页面重新获取尺寸大小，从而导致页面的性能下降，需要避免这种情况的发生。6.合理使用缓存：使用浏览器缓存可以使页面的加载速度更快，但需要注意缓存过期时间和缓存内容的更新。"
}, {
	"姓名": "宋文博",
	"编号": "280",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "配置路由，使用vue异步操作",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "配置路由，使用vue异步操作",
	"3.在前端开发中，什么样的代码会导致性能很低？": "重复遍历的，插入和删除，字符串操作",
	"4.在Webpack中，如何配置loader和plugin": "通过npm安装到本地，然后在webpack.config.js文件头部引入，用new生成实例注入到webpack",
	"5.请说说前端怎么处理网络性能优化？": "合并文件减少请求，减少DOM访问"
}, {
	"姓名": "李珅发",
	"编号": "279",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter实现路由的懒加载是通过webpack的动态import功能来实现的。在Vue中定义路由时，可以使用import()函数来异步加载组件。这样就可以将每个路由对应的组件单独打包成一个文件，只有在访问该路由时才会进行加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter实现路由的懒加载是通过webpack的动态import功能来实现的。在Vue中定义路由时，可以使用import()函数来异步加载组件。这样就可以将每个路由对应的组件单独打包成一个文件，只有在访问该路由时才会进行加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.重复DOM查询和操作2.大量的同步请求3.大量的图片和视频文件3.不当的css，如选择器嵌套太深4.大量的JavaScript代码。过多的JavaScript代码会导致浏览器运行缓慢，影响页面性能和用户交互体验",
	"4.在Webpack中，如何配置loader和plugin": "安装需要的loader在webpack.config.js中，可以通过require()方法或者import语句导入所需的loader，例如:constpath=require('path');module.exports={module:{rules:[//处理CSS文件{test:/\\.css$/，use:[\"style-loader\"，\"css-loader\"]}，//处理图片资源{test:/\\.(png|svg|jpg|gif)$/，use:[\"file-loader\"]}，//处理字体文件{test:/\\.(woff|woff2|eot|ttf|otf)$/，use:[\"file-loader\"]}，]}}而Plugin一样也是先安装需要的plugin插件例如配置使用如下:constHtmlWebpackPlugin=require('html-webpack-plugin');const{CleanWebpackPlugin}=require('clean-webpack-plugin');module.exports={plugins:[newCleanWebpackPlugin()，newHtmlWebpackPlugin({template:'./src/index.html'})]}",
	"5.请说说前端怎么处理网络性能优化？": "减少HTTP请求，使用cdn加速，图片优化，减小图片大小，使用缓存，使用浏览器缓存和CDN缓存来加快页面加载速度，减少请求服务器资源的次数，避免浪费带宽和资源。延迟加载，可以将一些不重要或非关键的资源延迟加载，使页面先显示出来，再逐步加载其他资源，提升用户的体验感。"
}, {
	"姓名": "曹小娴",
	"编号": "278",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由懒加载有三种方式实现：1、ES6中import导入实现2、vue异步加载实现3、webpage的require.ensure()实现",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由懒加载有三种方式实现：1、ES6中import导入实现2、vue异步加载实现3、webpage的require.ensure()实现",
	"3.在前端开发中，什么样的代码会导致性能很低？": "图片无合并、图片无预加载、首次加载时间长、发送无效请求数、seo标题不应太长、关键词应精准、使用太多的dom节点",
	"4.在Webpack中，如何配置loader和plugin": "1.loader配置module:{rules:[{test:/\\.css$/，//正则匹配use:[{loader:\"css-loader\"，options:{}}]}]}2.plugin配置plugins:[newCleanWebpackPlugin()，newHtmlWebpackPlugin({title:\"首页\"，template:\"./public/home.html\"})]",
	"5.请说说前端怎么处理网络性能优化？": "图片懒加载、路由懒加载、减少http请求数、减少dom操作、路由懒加载、资源压缩和合并等等"
}, {
	"姓名": "彭少瑄",
	"编号": "277",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以通过路由懒加载技术来实现将路由组件按需加载。这种方式可以避免在初始渲染时一次性加载所有路由组件，优化应用的性能和用户体验。具体实现方式如下：constFoo=()=>import('./Foo.vue');constrouter=newVueRouter({routes:[{path:'/foo'，component:Foo}，//...]});",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以通过路由懒加载技术来实现将路由组件按需加载。这种方式可以避免在初始渲染时一次性加载所有路由组件，优化应用的性能和用户体验。具体实现方式如下：constFoo=()=>import('./Foo.vue');constrouter=newVueRouter({routes:[{path:'/foo'，component:Foo}，//...]});",
	"3.在前端开发中，什么样的代码会导致性能很低？": "大量的HTTP请求大量的DOM操作大量的重绘和回流长时间占用主线程内存泄漏",
	"4.在Webpack中，如何配置loader和plugin": "配置Loader：在Webpack的module.rules配置中，可以为每一种文件类型定义对应的loader，用于对该类型文件进行处理。配置Plugin：在Webpack的plugins配置中，可以为Webpack添加各种功能的插件。",
	"5.请说说前端怎么处理网络性能优化？": "减少HTTP请求数量压缩文件体积使用缓存机制DNS预解析懒加载和预加载服务端渲染：通过使用服务器端渲染技术，将页面的HTML和内容在服务器端生成，并直接返回给客户端展示。这样可以优化页面的加载速度、SEO等方面的性能表现。"
}, {
	"姓名": "鲁廷阳",
	"编号": "276",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "vue-router配置路由，使用vue的异步实现懒加载--component：resolve=>(require([‘加载路由的地址’])，resolve)；es6新增的import()",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "vue-router配置路由，使用vue的异步实现懒加载--component：resolve=>(require([‘加载路由的地址’])，resolve)；es6新增的import()",
	"3.在前端开发中，什么样的代码会导致性能很低？": "图片过多的页面，css和js文件过大（注释，冗余代码等），过多对dom的操作等都会导致性能降低",
	"4.在Webpack中，如何配置loader和plugin": "终端运行npminstallstyle-loadercss-loader-D安装处理loader在webpack.config.js文件中module.exports下配置安装npminstallclean-webpack-plugin-D导入const{cleanWebpackPlugin}=require(\"clean-webpack-plugin\")modele.exports={plugins:[newcleanWebpackPlugin()]}",
	"5.请说说前端怎么处理网络性能优化？": "合并图片，可以减少请求去掉不必要的请求，开发完后删除多余的请求连接压缩css和js，减少不必要的Cookie等"
}, {
	"姓名": "李宇航",
	"编号": "275",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "import()只有在这个路由被访问到的时候才加载对应的组件否则不加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "import()只有在这个路由被访问到的时候才加载对应的组件否则不加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的http请求前端做了很多计算相关的事情，前后端分配不合理cssjs文件位置不规范重复调用组件过多的循环",
	"4.在Webpack中，如何配置loader和plugin": "在webpack.config.js中指定loader然后安装指定的loader配置plugin是拓展，丰富webpack，比如mini-css-extract-plugin将css提取到一个文件中",
	"5.请说说前端怎么处理网络性能优化？": "减少http请求例如图片转成base64，缩减合并cssjs，首屏懒加载"
}, {
	"姓名": "孙佛滨",
	"编号": "274",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "()=>import(\"路由组件\")只有进入路由组件时才会走compnent，才会执行import编译加载相应的组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "()=>import(\"路由组件\")只有进入路由组件时才会走compnent，才会执行import编译加载相应的组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "长列表不用虚拟列表实现很多代码堆在一个页面路由加载不使用路由懒加载",
	"4.在Webpack中，如何配置loader和plugin": "loader：安装依赖，配置loader规则plugin：安装依赖，引入，配置loader规则，配置plugin生成文件的位置",
	"5.请说说前端怎么处理网络性能优化？": "不频繁改变的数据，协商缓存logo图片等不改变的数据，强缓存减少请求的次数，如：雪碧图请求数据体积的减小，如Gzip压缩"
}, {
	"姓名": "邓兰金",
	"编号": "273",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用component：（）=》import（页面文件路径）",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用component：（）=》import（页面文件路径）",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，过多的网络请求2，前端代码的不规范3，静态文件资源过大",
	"4.在Webpack中，如何配置loader和plugin": "module：｛rules：【｛test：/\\.css$/，use：【loader：“css-loader”】｝】｝，plugins：【newCleanWebpackPlugin（）】",
	"5.请说说前端怎么处理网络性能优化？": "1，压缩图片等静态资源，2，压缩代码3，去除console.log4，前端代码结构优化"
}, {
	"姓名": "张彩云",
	"编号": "272",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由的懒加载是：在页面打包部署的时候，按照对应的页面进行划分，需要的时候加载对应页面的资源。如何按需加载路由组件：1、vue-router配置路由，使用异步组件2、可以使用import3、使用webpack的require.ensure技术",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由的懒加载是：在页面打包部署的时候，按照对应的页面进行划分，需要的时候加载对应页面的资源。如何按需加载路由组件：1、vue-router配置路由，使用异步组件2、可以使用import3、使用webpack的require.ensure技术",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、过多的网路请求，加载css图片2、过多的http3、写法不规范，引入多个组件，不进行组件化4、过多的计算放在前端",
	"4.在Webpack中，如何配置loader和plugin": "1、在webpack.config中配置loader2、安装指定的loader配置配置plugin1、安装npminstall--save-devhtml-webpack-plugin2、在webpack.config引入",
	"5.请说说前端怎么处理网络性能优化？": "1、减少http的请求2、压缩图片3、使用webpack合并js.css减少文件数量"
}, {
	"姓名": "王余明",
	"编号": "271",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "一、在配置路由规则的时候，component属性的值给写为一个import导入函数，从而实现路由懒加载二、当进入到对应的路由时，import会导入对应的路由组件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "一、在配置路由规则的时候，component属性的值给写为一个import导入函数，从而实现路由懒加载二、当进入到对应的路由时，import会导入对应的路由组件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、大量的操作dom元素会导致重绘与重排2、没有及时清楚定时器3、大量的通过变量去改变样式4、css选择器嵌套过多5、重复的http请求",
	"4.在Webpack中，如何配置loader和plugin": "配置loaderLoader用于对模块源码进行转换，将其转换为可以被Webpack处理的有效模块。常见的Loader有Babel（ES6转ES5）、CSS-loader（处理CSS样式）、File-loader（处理图片和字体文件）等。以下是配置一个简单的loader的步骤：安装所需的loader：使用npm或yarn安装相关的loader。在webpack.config.js文件中添加module.rules配置：在module中添加rules属性，规定需要使用哪些loader来处理文件，如下面的例子：module:{rules:[{test:/\\.js$/，exclude:/node_modules/，use:{loader:\"babel-loader\"}}，{test:/\\.css$/，use:[\"style-loader\"，\"css-loader\"]}]}上述代码中，第一条rule表示使用Babel-loader来处理所有.js文件，将ES6+转成ES5；第二条rule表示使用style-loader和css-loader来处理.css文件，使其可以被打包到JavaScript中。配置Plugin插件（Plugin）可以执行更广泛的任务，例如压缩代码、提取公共代码、生成HTML文件等。以下是配置一个简单的插件的步骤：安装所需的插件：使用npm或yarn安装需要的插件。在webpack.config.js文件中添加plugins配置：在plugins数组中添加需要使用的插件，如下面的例子：constHtmlWebpackPlugin=require('html-webpack-plugin');module.exports={plugins:[newHtmlWebpackPlugin({template:'./src/index.html'})]};上述代码中，引入了html-webpack-plugin插件，并通过实例化模板传递了一个模板文件路径。该插件能够自动生成一个HTML文件，并将打包后的文件自动引入到该HTML文件中。",
	"5.请说说前端怎么处理网络性能优化？": "1、减少不必要的以及重复的http请求2、将http请求改为https请求，增加安全性3、服务端渲染4、cdn加载"
}, {
	"姓名": "朱伯浩",
	"编号": "270",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1、配置路由时使用vue的异步组件2、使用import引入以上两种是比较常见的3、使用webpack的require.ensure方法",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1、配置路由时使用vue的异步组件2、使用import引入以上两种是比较常见的3、使用webpack的require.ensure方法",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的for循环以及过多同步的网络请求",
	"4.在Webpack中，如何配置loader和plugin": "在module.rules配置",
	"5.请说说前端怎么处理网络性能优化？": "将一些固定资源进行缓存减少请求次数上传文件进行大小压缩利用好全局变量减少重复接口的调用"
}, {
	"姓名": "罗家懿",
	"编号": "269",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以使用import来实现路由的懒加载。在路由配置中，可以将组件改为返回一个Promise，在需要时再动态加载组件。如：constHome=()=>import('@/components/home.vue')routes:[{path:'/home'，component:Home}]",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以使用import来实现路由的懒加载。在路由配置中，可以将组件改为返回一个Promise，在需要时再动态加载组件。如：constHome=()=>import('@/components/home.vue')routes:[{path:'/home'，component:Home}]",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、重复调用接口2、页面写很对无用的dom节点3、不使用分页，一次性拉去很大的数据4、不做图片懒加载",
	"4.在Webpack中，如何配置loader和plugin": "Webpack中可以使用module.rules配置项来配置loader如：rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}]plugin则是用于在webpack打包过程中执行一些额外的任务，例如优化、压缩、拷贝文件等:如：plugins:[newHtmlWebpackPlugin({template:'./src/index.html'})，newMiniCssExtractPlugin()]",
	"5.请说说前端怎么处理网络性能优化？": "1、尽量减少HTTP请求次数2、接口返回内容做Gzip压缩3、减少DOM元素数量"
}, {
	"姓名": "黄明",
	"编号": "268",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter实现路由懒加载的核心是利用了ES6的动态`import()`方法，将路由组件的加载推迟到路由被访问时再进行加载。可以使用`import()`方法来动态加载一个组件，该方法会返回一个Promise对象。当该Promise对象被resolve时，就表示该组件加载完成，可以被使用了",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter实现路由懒加载的核心是利用了ES6的动态`import()`方法，将路由组件的加载推迟到路由被访问时再进行加载。可以使用`import()`方法来动态加载一个组件，该方法会返回一个Promise对象。当该Promise对象被resolve时，就表示该组件加载完成，可以被使用了",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.多次重复查询DOM元素2.大量使用不必要的全局变量3.大量使用循环4.嵌套过深的代码结构5.大量操作DOM6.异步任务处理不当",
	"4.在Webpack中，如何配置loader和plugin": "需要在项目的根目录中创建一个名为`webpack.config.js`的文件用来配置Webpack。在该文件中，可以通过`modul.exports导出`entry`表示项目的入口文件，`output`则指定了打包后的文件名与存放的位置。`module`中的`rules`配置了两个loader，一个是针对`js`文件使用的Babel-loader，另一个是用于加载`css`文件的，使用了`style-loader`和`css-loader`。`plugins`中使用了HtmlWebpackPlugin插件，用来生成HTML文件",
	"5.请说说前端怎么处理网络性能优化？": "1.压缩资源2.优化图片3.减少HTTP请求4.推迟JavaScript的执行5.压缩JavaScript和CSS文件6.DNS预解析"
}, {
	"姓名": "青健玲",
	"编号": "267",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "()=>import('组件路径地址')",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "()=>import('组件路径地址')",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，代码的不规范2，过多的网络请求3，同步和异步的处理...",
	"4.在Webpack中，如何配置loader和plugin": "1.在webpack.config.js中指定loader2.安装指定的loader配置3，plugin是插件的意思，通常是用于对某个现有的架构进行扩展。",
	"5.请说说前端怎么处理网络性能优化？": "1，减少网络请求数2，优化界面代码3，对资源进行打包处理4，页面图片尽量使用，雪碧图，SVG图等"
}, {
	"姓名": "周江宇",
	"编号": "266",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1、在VueRouter中，实现路由的懒加载主要是通过Webpack提供的动态import()语法。2、通过component属性来指定路由组件。如果使用了懒加载，component属性的值可以是一个返回一个Promise对象的函数。当这个路由被访问时，VueRouter将会异步加载这个函数，然后将返回的Promise解析成一个组件，并将其渲染到页面上。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1、在VueRouter中，实现路由的懒加载主要是通过Webpack提供的动态import()语法。2、通过component属性来指定路由组件。如果使用了懒加载，component属性的值可以是一个返回一个Promise对象的函数。当这个路由被访问时，VueRouter将会异步加载这个函数，然后将返回的Promise解析成一个组件，并将其渲染到页面上。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、大量的http请求。2、大量的dom操作，影响页面渲染。3、大量的js计算。占用cpu。4、代码中存在大量的循环和嵌套等复杂结构。",
	"4.在Webpack中，如何配置loader和plugin": "通常会在项目中配置一个webpack.config.js的文件，该文件导出一个配置对象，在这里面进行相关配置。",
	"5.请说说前端怎么处理网络性能优化？": "1、使用懒加载来延迟加载。2、使用精灵图和iconfont，减少请求资源体积。3、使用节流和防抖等技术，减少请求。"
}, {
	"姓名": "梁华祥",
	"编号": "265",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.Vue异步组件(异步加载)vue-router配置路由，使用vue的异步组件技术，可以实现懒加载，但是这种情况是一个组件会生成一个js文件。component:resolve=>require(['需要加载的组件地址']，resolve)2.推荐方式-ES6的import()1.const组件名=()=>import('组件路径')2.在一个大的路由模块下，指定相同的webpackChunkName。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.Vue异步组件(异步加载)vue-router配置路由，使用vue的异步组件技术，可以实现懒加载，但是这种情况是一个组件会生成一个js文件。component:resolve=>require(['需要加载的组件地址']，resolve)2.推荐方式-ES6的import()1.const组件名=()=>import('组件路径')2.在一个大的路由模块下，指定相同的webpackChunkName。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "（1）页面加载性能问题主要集中于下载关联的静态文件，比如CSS、JS、图片等，这些网络请求对网页加载影响最大（2）过多的HTTP请求（3）同步和异步的问题（4）CDN网络访问瓶颈，如果引入了国外的CDN地址那么网络请求必然耗时（5）前端代码的规范，比如随便复制导致引入不必要的组件、CSS和JS位置不规范、重复引入组件（6）把过多的计算任务放在前端处理，前后端处理不合理，过多处理计算交给前端",
	"4.在Webpack中，如何配置loader和plugin": "1.文件处理（loader）的使用安装依赖：cnpminstallcss-loaderstyle-loader-Dloader安装后，无需引入直接在webpack的配置文件中的module中的rules数组中使用，loader的执行是异步的（等后一个执行完才执行前一个），执行顺序是从后往前具体代码如下：//loader处理：webpack只认识.js.json文件，其他文件需要在此处做处理module:{rules:[{test:/\\.css$/，//正则检测本地的.css后缀文件use:[{loader:\"style-loader\"，options:{}}，{loader:\"css-loader\"}]，//loader执行是异步的，顺序是从后往前，options中放置参数}，]，}，2.插件（plugin）的使用安装依赖：cnpminstallclean-webpack-plugin-Dplugin安装后，先require引入、然后在plugins数组中中实例化具体代码如下：const{CleanWebpackPlugin}=require(\"clean-webpack-plugin\");plugins:[newCleanWebpackPlugin()]，//插件，非loader的处理",
	"5.请说说前端怎么处理网络性能优化？": "前端性能优化，主要分两个大方向：资源加载优化和代码优化。资源加载优化：1.使用HTTP/22.懒加载3.开启gzip4.图片使用WebP5.空闲时加载之后可能需要访问的资源6.base64内联7.合理使用HTTP缓存8.使用SVG9.CSS放头JS放尾10.域名分片11.使用缩略图12.压缩文本类资源13.CDN内容分发网络代码优化：1.节流和防抖2.事件委托3.使用缓存4.长列表优化：a.使用时间分片，b.使用虚拟列表5.WebWorker6.注意内存泄漏问题7.减少回流和重绘8.改用服务端渲染/预渲染"
}, {
	"姓名": "钟迪龙",
	"编号": "264",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "首先，我们在开发的过程中，肯定会定义很多个页面，而这些页面在bulid打包之后呢会放在一个单独的js文件里，当这个项目页面较多时，文件就会变得很大这样情况下我们从服务器下载下来的时候呢就会很花费一定的时间，从而影响客户的使用体验。那么如何避免这种情况，答案是使用图片懒加载。简单理解就是路由所对应的组件打包成一个个的代码块，在需要访问这个路由的时候再加载，也就是按需加载。如何按需加载路由组件？1.Vue异步组件2.ES6标准语法import（）3.Webpack的require，ensure（）",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "首先，我们在开发的过程中，肯定会定义很多个页面，而这些页面在bulid打包之后呢会放在一个单独的js文件里，当这个项目页面较多时，文件就会变得很大这样情况下我们从服务器下载下来的时候呢就会很花费一定的时间，从而影响客户的使用体验。那么如何避免这种情况，答案是使用图片懒加载。简单理解就是路由所对应的组件打包成一个个的代码块，在需要访问这个路由的时候再加载，也就是按需加载。如何按需加载路由组件？1.Vue异步组件2.ES6标准语法import（）3.Webpack的require，ensure（）",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.页面加载性能问题主要集中于下载关联的静态文件，比如CSS、JS、图片等，这些网络请求对网页加载影响最大2.过多的HTTP请求3.同步和异步的问题5.CDN网络访问瓶颈，如果引入了国外的CDN地址那么网络请求必然耗时5.前端代码的规范，比如随便复制导致引入不必要的组件、CSS和JS位置不规范、重复引入组件6.把过多的计算任务放在前端处理，前后端处理不合理，过多处理计算交给前端",
	"4.在Webpack中，如何配置loader和plugin": "在跟目录下创建一个webpack.config.js文件，来作为webpack的配置文件如何配置loaderloader用于指定模块类型进行转换1.在webpack.config.js中指定loader2.安装指定的loader配置（css-loader、style-loader、less-loader）如何配置pluginplugin可以打包优化，资源管理、环境变量注入等，通过npminstall指令来安装插件1.CleanWebpackPlugin2.HtmlWebpackPlugin3.DefinePlugin4.CopyWebpackPlugin",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTTP请求，使用HTTP22.静态资源使用CDN3.利用http缓存4.dns预解析5.压缩文本类资源6.使用iconfont代替图片图标7.使用节流防抖8.图片懒加载、图片压缩"
}, {
	"姓名": "陈坤",
	"编号": "263",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "可以通过webpack动态import语法来实现，()=>import('./a.vue')",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "可以通过webpack动态import语法来实现，()=>import('./a.vue')",
	"3.在前端开发中，什么样的代码会导致性能很低？": "使用不必要的DOM元素或重复的DOM元素，加载过多的图片或视频资，代码中存在死循环或递归调用，没有进行代码压缩和代码合并等等。",
	"4.在Webpack中，如何配置loader和plugin": "Loader用于将不同类型的文件转换为Webpack可以处理的模块。在配置文件中，需要对应地为每种文件类型指定相应的Loader。Plugin用于执行一些任务，例如打包优化、资源管理、环境变量注入。通过require引入了需要使用的Plugin，然后在plugins属性中分别实例化plugin。",
	"5.请说说前端怎么处理网络性能优化？": "1.对页面进行压缩和合并，减少HTTP请求次数2.图片过大，可以采用压缩图片或者使用WebP格式替代JPEG或PNG等格式3.使用CDN加速4.对于一些不必要立即显示的内容，可以采用延迟加载的方式5.利用浏览器缓存来减轻服务器的压力，加快页面加载速度"
}, {
	"姓名": "张富洋",
	"编号": "262",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "可以将组件的引入改为函数式引入，通过import导入。VueRouter按需加载路由组件就是通过import动态导入实现的。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "可以将组件的引入改为函数式引入，通过import导入。VueRouter按需加载路由组件就是通过import动态导入实现的。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "DOM操作过多，重复的代码过多，同步请求数据，图片和媒体资源过多。",
	"4.在Webpack中，如何配置loader和plugin": "配置loader：在Webpack配置文件里面通过module.rules来定义规则，匹配到相应的文件时再使用相应的loader进行处理；配置plugin：在Webpack配置文件里面通过plugins来定义插件列表，在plugins中可以配置需要的plugin插件。",
	"5.请说说前端怎么处理网络性能优化？": "可以减少http的请求，可以使用http2协议，资源懒加载，减小资源文件大小，优化图片的加载。"
}, {
	"姓名": "吕锦滨",
	"编号": "261",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "constcomponent=()=>import('a.vue')定义一个路由:{path：'/a'，name：'a'，component}",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "constcomponent=()=>import('a.vue')定义一个路由:{path：'/a'，name：'a'，component}",
	"3.在前端开发中，什么样的代码会导致性能很低？": "代码体积大，冗余多，递归，多层循环，storage数据存储过多。单个资源文件太大，请求耗时过长。不必要的重复请求，没有做缓存处理。",
	"4.在Webpack中，如何配置loader和plugin": "loader:在modules下配置rules，rules是一个数组，每项为一个对象，可以配置test(正则匹配文件)，loader(对应loader)，optionsplugin:配置plugins，它是一个数组，每项需要一个Plugin实例，如newXxx",
	"5.请说说前端怎么处理网络性能优化？": "使用icon字体图标代替图片图标，也可用雪碧图，然后通过background-position定位，对图片进行压缩，体积较小的图片可转换成base64形式；css，js等资源拆分成较小体积，使用gzip压缩；css资源放在head;使用cdn加速等;不要使用过多的cookie;资源缓存等等"
}, {
	"姓名": "江振清",
	"编号": "260",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "component:resolve>require实现异步加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "component:resolve>require实现异步加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，代码不规范，静态文件太大，没语意话，引入不必要文件2，过多请求没防抖节流3，进行大量复杂计算4没有精简话代码",
	"4.在Webpack中，如何配置loader和plugin": "webpack的loader，plugin这一块了解不多，需要研究研究。vue中可以给vue加plugin方法",
	"5.请说说前端怎么处理网络性能优化？": "网络性能优化不太了解，尽量减少请求吧，比如节流防抖，限制频繁请求，或者是缓存"
}, {
	"姓名": "王易飞",
	"编号": "259",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用import函数分包加载页面组件，将路由对应的组件打包成模块，只有这个模块被访问的时候才加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用import函数分包加载页面组件，将路由对应的组件打包成模块，只有这个模块被访问的时候才加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "多次for循环，未销毁的定时器，监听器，css样式多次改变页面布局，",
	"4.在Webpack中，如何配置loader和plugin": "loader需要先安装对应的loader再在webpack.config.js里配置module.rules的使用范围和和使用哪些loaderplugin需要引入一个插件，在plugins里new一个引入成绩的实例对象",
	"5.请说说前端怎么处理网络性能优化？": "减少网络请求，白屏时间做load动画服务端渲染，gzip压缩图片预加载和懒加载，图标使用svg，过大图片转换为base64格式代码使用节流和防抖，减少回流和重绘"
}, {
	"姓名": "刘佳豪",
	"编号": "258",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以通过路由懒加载实现按需加载路由组件，这样可以在需要使用该组件时再进行加载，而不是在应用程序启动时一次性加载所有组件，从而提高了应用程序的性能和响应速度。1.使用import()函数动态加载组件2.在路由定义中使用component属性来指定需要加载的组件3.对于多个路由组件的懒加载，可以使用Webpack的代码分割功能来将组件按照路由拆分成独立的代码块",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以通过路由懒加载实现按需加载路由组件，这样可以在需要使用该组件时再进行加载，而不是在应用程序启动时一次性加载所有组件，从而提高了应用程序的性能和响应速度。1.使用import()函数动态加载组件2.在路由定义中使用component属性来指定需要加载的组件3.对于多个路由组件的懒加载，可以使用Webpack的代码分割功能来将组件按照路由拆分成独立的代码块",
	"3.在前端开发中，什么样的代码会导致性能很低？": "大量或复杂的CSS选择器和规则复杂的JavaScript循环和递归操作过多的HTTP请求和加载大型资源，如图片和视频大量使用JavaScript库和框架没有进行优化的图片和媒体文件非优化的动画效果和过度渲染",
	"4.在Webpack中，如何配置loader和plugin": "在Webpack中配置loader和plugin可以让我们对文件进行处理、优化和生成，从而满足项目的需求。安装需要的loader和plugin在Webpack配置文件中引入需要的loader和plugin配置loader和plugin的选项",
	"5.请说说前端怎么处理网络性能优化？": "减少HTTP请求次数：减少页面资源的请求次数对于提高网页加载速度非常重要。可以通过使用雪碧图、图像压缩和合并等技术来减少请求次数。压缩和缓存文件：压缩和缓存文件也可以提高网页加载速度。例如使用Gzip压缩传输的文件，以及在浏览器中设置适当的缓存头。按需加载资源：按需加载可以使页面加载时间更快，这意味着不需要立即加载所有内容。可以采用图片懒加载、分批加载和资源预加载等策略来实现。使用CDN加速：使用CDN（ContentDeliveryNetwork）可以提高页面资源的访问速度。CDN会将网站资源复制到多个服务器上，并根据用户的位置选择最近的服务器进行访问。优化代码结构：优化HTML、CSS和JavaScript的代码结构可以提高文件下载速度。例如删除注释、空行和无用代码。最小化DOM操作：过多的DOM操作会导致网页反应缓慢。避免使用多次操作而是尝试一次性修改多个元素。图片优化：图片是占据网页大小百分比较大的部分之一。压缩图片或者选用适当的格式，比如WebP，JPEG2000等，可以减少图片大小并提高页面渲染速度。"
}, {
	"姓名": "廖文韬",
	"编号": "257",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "懒加载的实现是将路由对应的组件打包成一个个的js代码块。只有在这个路由被访问到的时候，才会加载对应组件的代码块。路由实现按需加载可以使用Vue的异步组件技术，ES6提供的import方法或者使用webpack提供的require.ensure来实现",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "懒加载的实现是将路由对应的组件打包成一个个的js代码块。只有在这个路由被访问到的时候，才会加载对应组件的代码块。路由实现按需加载可以使用Vue的异步组件技术，ES6提供的import方法或者使用webpack提供的require.ensure来实现",
	"3.在前端开发中，什么样的代码会导致性能很低？": "在前端开发中，大量的嵌套循环、DOM操作、过多的HTTP请求以及缺少缓存等都会导致性能很低。",
	"4.在Webpack中，如何配置loader和plugin": "在Webpack的配置文件中，可以使用module.rules配置loader，用于处理不同类型的文件，同时可以使用plugins配置插件，用于执行各种webpack任务",
	"5.请说说前端怎么处理网络性能优化？": "1.减少HTTP请求2.使用缓存3.使用CDN"
}, {
	"姓名": "严果丰",
	"编号": "256",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.vue异步组件2.ES6标准语法import（）3.webpack的requireensure（）1.vue异步组件技术{path:'/promisedemo'，name:'PromiseDemo'，component:resolve=>require([组件路径]，resolve)2.路由懒加载cosntdemo1=（）=>import('../component/demo1)resolve，ensure方法{path:'/promisedemo'，name:'promiseDemo'，component:resolve=>require.ensure([]，()=>resolve(组件)）}",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.vue异步组件2.ES6标准语法import（）3.webpack的requireensure（）1.vue异步组件技术{path:'/promisedemo'，name:'PromiseDemo'，component:resolve=>require([组件路径]，resolve)2.路由懒加载cosntdemo1=（）=>import('../component/demo1)resolve，ensure方法{path:'/promisedemo'，name:'promiseDemo'，component:resolve=>require.ensure([]，()=>resolve(组件)）}",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.长时间占用js线程2.计算时间过长导致页面渲染不及时3.页面回流和重绘较多4.资源加载阻塞5.内存泄漏导致内存过大6.没有及时清理定时器7.引用循环8.DOM删除时没有解绑事件10.dom节点或事件占用内存过大",
	"4.在Webpack中，如何配置loader和plugin": "1.Loader的配置：在module.rules数组中添加一个新对象，该对象包含以下属性：test：一个用于匹配要加载的文件的正则表达式。use：一个或多个loader的名称或路径，按照从右到左的顺序应用。例如，以下是使用babel-loader转译JavaScriptPlugin的配置：在plugins数组中添加一个新的插件实例。例如，以下是使用HtmlWebpackPlugin插件生成HTML文件",
	"5.请说说前端怎么处理网络性能优化？": "压缩和缩小文件大小：通过压缩CSS、JavaScript和图像等文件，以及避免不必要的重复代码和注释，可减少加载时间和网络请求次数。使用CDN加速：将网站资源放置在全球各地的CDN服务器上，可以缓解网络延迟和带宽瓶颈问题，提高网站访问速度。减少HTTP请求：合并多个CSS和JS文件，使用精灵图代替多张小图，减少请求次数。延迟加载：按需加载图片和其他内容，而不是一次性全部加载，可以更快地显示整个页面，并减轻服务器负担。浏览器缓存：启用浏览器缓存可以减少重复请求，加快页面加载速度。优化图片：使用适当的图片格式和大小，以及压缩图片来减少文件大小和加载时间。精简代码：删除无用的代码和样式表，从而减少下载和解析时间。"
}, {
	"姓名": "常欢",
	"编号": "255",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "可以通过Webpack的动态导入实现路由懒加载，Webpack提供了一个能够异步加载魔魁啊的方法-import()，可以动态地把模块导入到代码中例如：constHome=()=>improt(\"./Home.vue\")",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "可以通过Webpack的动态导入实现路由懒加载，Webpack提供了一个能够异步加载魔魁啊的方法-import()，可以动态地把模块导入到代码中例如：constHome=()=>improt(\"./Home.vue\")",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.大量的HTTP请求2.大量的DOM操作3.页面加载如果存在大量的计算，也会导致性能下降，这是除了JavaScript语言本身的性能。还有算法优化等问题决定。4.图片或者加载资源过大，导致页面加载速度变慢。甚至导致页面奔溃5.缺乏缓存策略，浏览器每次访问页面都需要重新加载所用到的资源就会导致页面加载时间过长",
	"4.在Webpack中，如何配置loader和plugin": "//配置LoaderStep1:安装所需要的Loadernpminstall--save-devstyle-loadercss-loaderSetp2:配置module.exports={module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}]}}//配置PluginStep1:安装所需要的Pluginnpminstall--save-devuglifyjs-webpack-pluginSetp2:配置constUglifyJSPlugin=require('uglifyjs-webpack-plugin')module.exports={plugins:[newUglifyJSPlugin()]}",
	"5.请说说前端怎么处理网络性能优化？": "1.减少Http请求，使用字体图标，删除不不要的资源，减少Http请求的次数2.使用CDN加速：使用CDN可以使用户更快的获取页面所需要的资源，减少页面加载事件3.使用压缩技术，使用gzip等压缩技术减少资源的大小，从而减少网络传输事件和流量4.使用加载技术，使用预加载技术可以再页面加载完成钱预加载一些资源，提高页面的响应速度和用户体验5.使用懒加载技术，懒加载技术可以再需要的时候再加载资源，从而减少页面初次加载时间6，优化图片，使用合适的图片格式，压缩图片大小，使用响应式图片等方式，而可以减少图片大小7.代码优化：优化js和CSS代码，去除重复的代码，避免嵌套过深等，减少文件大小，提高页面加载速度"
}, {
	"姓名": "孙政",
	"编号": "254",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由规则匹配成功，通过import（）这个是运行时加载函数，函数返回一个vue组建",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由规则匹配成功，通过import（）这个是运行时加载函数，函数返回一个vue组建",
	"3.在前端开发中，什么样的代码会导致性能很低？": "递归，多重for循环，事件监听私有变量不回收",
	"4.在Webpack中，如何配置loader和plugin": "先nmp下载loader或者plugin，loader需要配置rules，plugin需要new",
	"5.请说说前端怎么处理网络性能优化？": "http请求合并，本地缓存，懒加载等"
}, {
	"姓名": "杨征",
	"编号": "253",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "require.ensure()或import()VueRouter在路由切换时，会根据路由异步加载对应组件并完成渲染，提高了页面的加载速度和用户的体验。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "require.ensure()或import()VueRouter在路由切换时，会根据路由异步加载对应组件并完成渲染，提高了页面的加载速度和用户的体验。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，大量的http请求2，大量的DOM操作3，不合理的选择器4，没有优化的图片",
	"4.在Webpack中，如何配置loader和plugin": "配置loader例如，在打包时需要处理Sass文件，可以通过使用sass-loader和css-loader：```module:{rules:[{test:/\\.scss$/，use:['style-loader'，'css-loader'，'sass-loader']}]}配置plugin可以使用CommonsChunkPlugin：```plugins:[newwebpack.optimize.CommonsChunkPlugin({name:'common'，minChunks:2})]",
	"5.请说说前端怎么处理网络性能优化？": "1，最直接也是最容易的就是减少http请求次数2，将静态资源部署到CDN上3，图片优化，代码优化"
}, {
	"姓名": "谢永久",
	"编号": "252",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在router中的component：()=>import('路径名字')；若path路劲匹配则会执行相应的回调函数，加载对应的组件模块。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在router中的component：()=>import('路径名字')；若path路劲匹配则会执行相应的回调函数，加载对应的组件模块。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "重复性的innerHTML，频繁操作dom。Vue中不合理得使用v-if，v-show。React中重复让子组件也能响应父组件不必要得变量数据。",
	"4.在Webpack中，如何配置loader和plugin": "loader是在module里面配置得，里面有一个正则表达式，即以什么样结尾得文件，则使用对应得loader进行解析编译到出口处。当然，需要先下载相应得loader。plugin中配置css插件。",
	"5.请说说前端怎么处理网络性能优化？": "1通过head中得link标签通过预解析服务器域名。2使用ssr服务器渲染。3.CSS样式放body前script标签放在body后。4.图片传输进行压缩，base64。"
}, {
	"姓名": "李翰林",
	"编号": "251",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用import。会把每个组件打包成一个js文件",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用import。会把每个组件打包成一个js文件",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的http请求，没有实现按需加载路由，同步和异步使用问题",
	"4.在Webpack中，如何配置loader和plugin": "在webpack.config.js中指定loader，按着指定的loader配置。plugin中可以配置CleanWebpackPluhin和HymlWebpackPlugin",
	"5.请说说前端怎么处理网络性能优化？": "减少httpa请求，减少DNS查找次数，避免跳转，可缓存的AJAX"
}, {
	"姓名": "葛梦莹",
	"编号": "250",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.项目规模不是特别大的话，可以使用vue的异步组件技术实现按需加载：component:resolve=>require(['放入需要加载的路由地址']，resolve)这种方式下每一个组件就会生成一个js文件，不能分类指定chunkName2.使用import并指定webpackChunkName，相同的webpackChunkName会打包成一个js文件constHome=()=>import(/*webpackChunkName:'ImportFuncDemo'*/'@/components/home');",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.项目规模不是特别大的话，可以使用vue的异步组件技术实现按需加载：component:resolve=>require(['放入需要加载的路由地址']，resolve)这种方式下每一个组件就会生成一个js文件，不能分类指定chunkName2.使用import并指定webpackChunkName，相同的webpackChunkName会打包成一个js文件constHome=()=>import(/*webpackChunkName:'ImportFuncDemo'*/'@/components/home');",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.没有优化的图片加载：过大或未经压缩的图片会增加网页的下载时间，导致页面加载变慢并消耗更多流量。2.频繁的DOM操作和重绘3.大量或者冗余的HTTP请求4.没有利用缓存5.对于项目打包这个过程没有做优化：比如分包、静态资源压缩、热更新、CDN引入、路由懒加载等等",
	"4.在Webpack中，如何配置loader和plugin": "1.安装对应的loader或者plugin，在package.json文件中添加依赖2.在webpack.config.js文件中增加module.rules配置，并为不同的模块匹配相应的loader。比如，为js文件添加babel-loader，为css文件添加css-loader和style-loader。3.添加plugin配置，一些常用的plugin包括html-webpack-plugin、clean-webpack-plugin等。比如，在使用html-webpack-plugin时，可以设置生成的HTML文件名和路径，并指定使用的模板。4.根据需求进行更深层次的配置，例如配置某个插件的具体参数等。5.运行webpack命令来编译代码。",
	"5.请说说前端怎么处理网络性能优化？": "1.对于第三方依赖包使用CDN引入，解决打包后单文件体积过大的问题，减少服务器负载和文件下载时间2.压缩以及合并静态资源，如JS、CSS、图片等等3.灵活应用浏览器缓存，当再次访问网站的时候可以直接读取缓存来提高加载速度4.灵活使用WebWorkers和分片技术，像大文件做切片上传、断点续传等，可以放在Worker线程来做5.针对图片灵活使用图片预加载、按需加载等技术优化图片加载性能6.通过一些配置对公共代码抽离，根据体积大小、共用率、更新频率等考虑因素重新划分包7.路由懒加载8.针对长列表可以做虚拟列表进行优化9.移动端可以通过Viewport设置、响应式设计以及选择适合移动端的图片格式等进行优化10.还有一些代码层面的优化，比如尽可能使用CSS3动画代替JS实现页面的动画等，减少DOM操作和重绘"
}, {
	"姓名": "刘鸿博",
	"编号": "249",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "有三种实现方式：1.使用Vue的异步加载组件。2.使用es6中的import（）3.利用webpack的require.ensure（）组件先在路由里注册但是不进行组件的加载与执行，等需要访问组件的时候才进行真正的加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "有三种实现方式：1.使用Vue的异步加载组件。2.使用es6中的import（）3.利用webpack的require.ensure（）组件先在路由里注册但是不进行组件的加载与执行，等需要访问组件的时候才进行真正的加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "过多的http请求；随便复制导致引入不必要的组件、CSS和JS位置不规范，重复引入组件等。",
	"4.在Webpack中，如何配置loader和plugin": "安装：npminstallurl-loader-D安装：npminstallfile-loader在webpack/vue.config.js中的module配置rules安装依赖：cnpminstallclean-webpack-plugin-Dplugin安装后，先require引入、然后在plugins数组中中实例化",
	"5.请说说前端怎么处理网络性能优化？": "使用CDN使用DNS预解析并行连接，持久连接，管道化连接"
}, {
	"姓名": "邓顺波",
	"编号": "248",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由配置时，使用vue的异步组件技术component:resolve=>require(['@/components/login']，resolve)",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由配置时，使用vue的异步组件技术component:resolve=>require(['@/components/login']，resolve)",
	"3.在前端开发中，什么样的代码会导致性能很低？": "http请求过多，图片请求过多或太大，if代码判断，头部定义css的style和javascript，cookie请求过多，尽量避免使用eval",
	"4.在Webpack中，如何配置loader和plugin": "webpack.config.js文件或者其他文件中进行中配置use:[{loader:\"style-loader\"}，{loader:\"css-loader\"}{loader:\"less-loader\"}]npminstallhtml-webpack-plugin-D安装现在webpack已加入自动配置中，可以在.json文件中查看",
	"5.请说说前端怎么处理网络性能优化？": "减少http请求，图片合并请求，文件压缩，图片定义width和height，懒加载，延迟加载，使用cdn缓存，减少DOM使用，使用不同域名加载不同内容"
}, {
	"姓名": "雷水平",
	"编号": "247",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以通过使用异步组件实现路由的懒加载。当定义路由时，可以将组件定义为一个返回`import()`的函数，这个函数返回的是一个Promise对象，该对象将在组件被访问时异步加载组件。当路由被访问时import()会被调用，然后异步加载组件。这可以显著减少初始页面加载时的资源消耗，特别是在应用程序中有许多组件需要加载的情况下。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以通过使用异步组件实现路由的懒加载。当定义路由时，可以将组件定义为一个返回`import()`的函数，这个函数返回的是一个Promise对象，该对象将在组件被访问时异步加载组件。当路由被访问时import()会被调用，然后异步加载组件。这可以显著减少初始页面加载时的资源消耗，特别是在应用程序中有许多组件需要加载的情况下。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "大量的HTTP请求：每次请求都会有一定的延迟和开销，如果一个页面需要加载很多资源文件，比如图片、样式表、脚本等，那么就会增加页面的加载时间和资源消耗。大量的DOM操作：DOM操作是比较消耗资源的操作，尤其是频繁的操作，比如使用jQuery的大量选择器、操作属性和样式等，都会导致性能下降。缺乏缓存机制：缓存机制可以减少不必要的HTTP请求，从而提高性能，例如使用浏览器缓存、CDN缓存、服务端缓存等方式。大量的重排和重绘：浏览器渲染过程中，DOM节点的布局和样式变化会导致浏览器进行重排和重绘，这些操作都比较消耗性能",
	"4.在Webpack中，如何配置loader和plugin": "Webpack是一个强大的打包工具，可以将各种文件打包成一个或多个输出文件。为了让Webpack知道如何处理各种类型的文件，我们需要配置相应的loader和plugin。",
	"5.请说说前端怎么处理网络性能优化？": "压缩文件：将CSS，JavaScript和HTML文件压缩可以减少文件大小，从而加快网页加载速度。图片优化：减少图片文件的大小是一个简单有效的方法，可以通过压缩图片、使用WebP格式或使用SVG矢量图来实现。资源缓存：利用缓存机制可以避免浏览器重复请求相同的资源。可以使用浏览器缓存或CDN缓存来实现资源缓存。代码优化：优化代码结构和算法可以减少浏览器的计算量，加快网页响应速度。减少HTTP请求：减少HTTP请求可以减少网页加载时间，可以通过合并CSS和JavaScript文件、使用雪碧图等方法来实现。"
}, {
	"姓名": "尹霞琴",
	"编号": "246",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由懒加载{path:'/foo'，component:()=>import('./Foo.vue')}，按需加载constMyComponent=Vue.lazy(()=>import('./MyComponent.vue'))",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由懒加载{path:'/foo'，component:()=>import('./Foo.vue')}，按需加载constMyComponent=Vue.lazy(()=>import('./MyComponent.vue'))",
	"3.在前端开发中，什么样的代码会导致性能很低？": "相同代码重复使用且不封装，判断条件很多，写了很多重复的样式，组件不抽离",
	"4.在Webpack中，如何配置loader和plugin": "安装所需Loader。例如，如果需要处理CSS文件，可以安装css-loader和style-loader。在webpack.config.js中配置Loader。module.exports={module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}]}}。配置其他Loader。根据需要，可以配置其他类型的Loader，例如file-loader用于处理图片、字体等文件类型，babel-loader用于将ES6+代码转换成浏览器可识别的JavaScript代码等等。constHtmlWebpackPlugin=require('html-webpack-plugin');module.exports={//入口文件entry:'./src/index.js'，//输出文件output:{path:path.resolve(__dirname，'dist')，filename:'bundle.js'}，//插件plugins:[//自动生成HTML文件newHtmlWebpackPlugin({template:'./src/index.html'})]};",
	"5.请说说前端怎么处理网络性能优化？": "使用CDN：使用内容分发网络（CDN）可以加速前端应用的资源加载速度。使用预加载和懒加载：通过预加载和懒加载可以优化前端应用的加载速度。预加载可以在页面加载完成后立即加载下一个页面的资源。减少HTTP请求：前端应用的每个HTTP请求都会增加页面的加载时间，因此可以通过减少HTTP请求的数量来优化网络性能。优化代码结构：通过优化代码结构可以提高前端应用的性能。例如，避免使用长时间运行的JavaScript代码，优化DOM操作，避免重复计算等。"
}, {
	"姓名": "王岳武",
	"编号": "245",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在路由处import引入路由和require异步加载去实现懒加载。在需求页面引入指定组件路由。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在路由处import引入路由和require异步加载去实现懒加载。在需求页面引入指定组件路由。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "重复引用定义，逻辑繁杂的代码",
	"4.在Webpack中，如何配置loader和plugin": "loader为转换器通过正则test配置转换指定类型文件plugin通过不同的配置和引用完成对打包文件的优化、管理及引用",
	"5.请说说前端怎么处理网络性能优化？": "尽量减少引用外部的图片和脚本。图片大小进行压缩"
}, {
	"姓名": "邱一均",
	"编号": "244",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1.使用import导入实现路由的懒加载2.可使用webpack中的require.ensure()实现按需加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1.使用import导入实现路由的懒加载2.可使用webpack中的require.ensure()实现按需加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.代码冗余量高，可重复性不高2.js脚本逻辑性不强，css构造不合理3.代码区块结构不清晰等",
	"4.在Webpack中，如何配置loader和plugin": "\"loader要先安装需要的loader比如css-loader安装：npmicss-loader-D在webpack.config.js中配置rules:[",
	"5.请说说前端怎么处理网络性能优化？": "{"
}, {
	"姓名": "姚泽彬",
	"编号": "243",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "通过()=>import('组件文件')的方式实现",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "通过()=>import('组件文件')的方式实现",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.存在内存泄漏，未在页面卸载时注销定时器或监听事件等2.多次引用通过对象下的属性，未使用别的变量去进行存储，导致多次引用该变量3.不合理使用循环，未通过优化逻辑的方式去优化代码，反而使用多个循环去处理问题",
	"4.在Webpack中，如何配置loader和plugin": "通过npm，yarn等方式安装loader或plugin，在webpack.config.js中的module下的rules或plugins中进行对应的配置",
	"5.请说说前端怎么处理网络性能优化？": "主要是从减少网络请求方面进行处理，如使用防抖，节流等方式合理去减少网络请求，通过懒加载的方式，只对当前显示器所能显示的内容进行请求"
}, {
	"姓名": "覃铭深",
	"编号": "242",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在项目打包的时候，对路由进行划分从而实现懒加载。在注册路由的时候，引入路由是在component中通过箭头函数使用import来导入路由从而实现路由懒加载的方式来按需加载。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在项目打包的时候，对路由进行划分从而实现懒加载。在注册路由的时候，引入路由是在component中通过箭头函数使用import来导入路由从而实现路由懒加载的方式来按需加载。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1、冗余的代码2、较多的http请求3、引入图片过多4、大量使用重定向5、过多使用@import引入css6、使用过多的css选择器7、静态数据不缓存",
	"4.在Webpack中，如何配置loader和plugin": "loader：首先安装你要使用的loader，然后在webpack的配置文件里引入，再在配置文件的module.rules里进行规则的配置。piugin：首先安装你所需要的插件的依赖，然后在webpack的配置文件里引入，再在配置文件的plugins里进行使用。",
	"5.请说说前端怎么处理网络性能优化？": "1、动态加载组件2、使用雪碧图，减少图片的请求3、用webpack合并压缩css和js"
}, {
	"姓名": "罗鑫",
	"编号": "241",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "在路由配置中定义一个component属性，指定要加载的组件的位置。constroutes=[{path:'/about'，name:'About'，component:()=>import('./views/About.vue')}]在使用Webpack打包应用程序时，Webpack会将import()转换为一个分离的代码块，当路由被访问时，它会按需加载代码块。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "在路由配置中定义一个component属性，指定要加载的组件的位置。constroutes=[{path:'/about'，name:'About'，component:()=>import('./views/About.vue')}]在使用Webpack打包应用程序时，Webpack会将import()转换为一个分离的代码块，当路由被访问时，它会按需加载代码块。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "频繁的DOM操作。大量的HTTP请求。大量的图片、视频等媒体资源。没有对代码进行优化。屎山。",
	"4.在Webpack中，如何配置loader和plugin": "loader配置module:{rules:[{test:/\\.css$/，use:['style-loader'，'css-loader']}，{test:/\\.js$/，exclude:/node_modules/，loader:'babel-loader'}]}plugin配置const{CleanWebpackPlugin}=require('clean-webpack-plugin');module.exports={plugins:[newCleanWebpackPlugin()，]};",
	"5.请说说前端怎么处理网络性能优化？": "减少请求次数和请求大小将多个脚本和样式表文件合并成一个文件，减少HTTP请求次数。使用适当的图片格式和大小，如使用WebP格式和适当的压缩率，使用CSSsprite或者iconfont来减少图片请求次数。使用HTTPCache-Control和Expires等响应头控制浏览器缓存，使得浏览器可以直接从本地缓存获取资源。使用CDN来缓存静态资源，减少请求时的传输距离，提高访问速度。对于非必要资源，可以使用懒加载或者按需加载等方式，减少页面初始加载时间。使用Ajax或者WebWorker等技术，将一些资源的加载放到后台异步进行，不影响页面的正常展示。减少重排和重绘，如使用CSS3动画代替JS动画，使用绝对定位或者transform代替大量的margin和padding。将JavaScript放到页面底部，或者使用异步加载方式，尽可能地减少JavaScript对页面的渲染和交互的影响。"
}, {
	"姓名": "陈笃庆",
	"编号": "240",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1，将各个路由的组件打包成一个个JS代码块在用户访问其中某一个路由时才会加载对应的路由组件2，利用Vue的异步组件技术或者使用ES6的（import）导入来实现组件按需加载",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1，将各个路由的组件打包成一个个JS代码块在用户访问其中某一个路由时才会加载对应的路由组件2，利用Vue的异步组件技术或者使用ES6的（import）导入来实现组件按需加载",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，遍历的多用2，临时变量的多用3，滥用闭包4，组件复用程度不高5，操作字符串",
	"4.在Webpack中，如何配置loader和plugin": "1，下载对应需要使用Loader或plugin2，在Webpack.config.js中引入对应的插件plugin和Loader3，在module中配置Loader3，在plugins中配置plugin",
	"5.请说说前端怎么处理网络性能优化？": "1，减少请求次数。例如：雪碧图等2，预加载3，使用外部JS和CSS4，提前请求数据量大或者其他（后端无法解决的，如外部接口请求的包太大等）"
}, {
	"姓名": "赵培耀",
	"编号": "239",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "可以采用vue异步加载组件，或者imprort()，这种比较常用。。。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "可以采用vue异步加载组件，或者imprort()，这种比较常用。。。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "冗余的代码，同步和异步代码没处理好，编码规范，一些重复的组件，过多的http请求",
	"4.在Webpack中，如何配置loader和plugin": "在webpack.config.js文件中去指定loader，loader的配置，是写在module.rules属性中。。关于plugin的配置，可以npm安装需要用到的plugins，然后在webpack.config.js中的plugins中配置插件",
	"5.请说说前端怎么处理网络性能优化？": "尽可能减少http的请求次数，资源加载方面的优化，采用懒加载，代码方面的优化，防止重复的代码及组件，css公共样式的处理，减少dom的访问，减小cookie体积，最好使用localStorage"
}, {
	"姓名": "赵景晨",
	"编号": "238",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。如下：{path:'/home'，name:'home'，component:resolve=>require(['@/components/home']，resolve)}还可以使用webpack的require.ensure技术，也可以实现按需加载。这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。如下：{path:'/home'，name:'home'，component:r=>require.ensure([]，()=>r(require('@/components/home'))，'demo')}",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "vue-router配置路由，使用vue的异步组件技术，可以实现按需加载.但是，这种情况下一个组件生成一个js文件。如下：{path:'/home'，name:'home'，component:resolve=>require(['@/components/home']，resolve)}还可以使用webpack的require.ensure技术，也可以实现按需加载。这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。如下：{path:'/home'，name:'home'，component:r=>require.ensure([]，()=>r(require('@/components/home'))，'demo')}",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.意外的全局变量引起的内存泄漏2.闭包引起的内存泄漏3.忘记删除的定时器4.大量的循环引用5.DOM删除时事件没有进行解绑6.js资源放在body之前7.大量的DOM操作等",
	"4.在Webpack中，如何配置loader和plugin": "指示webpack对每个.css使用css-loader，以及对所有.ts文件使用ts-loader：在webpack.config.js中配置如下：module.exports={module:{rules:[{test:/\\.css$/，use:'css-loader'}，{test:/\\.ts$/，use:'ts-loader'}，]，}，};在webpack.config.js文件中，通过Webpack配置对象的plugins属性进行配置，plugins为一个数组，其元素要求为插件对象Plugin的实例，配置参数可以通过Plugin在实例化时的构造参数进行传递，例如配置HtmlWebpackPlugin如下：constHtmlWebpackPlugin=require('html-webpack-plugin');module.exports=={entry:'./index.js'，output:{filename:'bundle.js'，path:path.resolve(__dirname，'dist')，}，plugins:[newHtmlWebpackPlugin({template:'./src/index.html'})，]，};",
	"5.请说说前端怎么处理网络性能优化？": "1.尽可能的减少HTTP请求2.将不必要的存储设置为浏览器存储3.静态css/js/img等资源可以做cdn缓存4.对图片实施懒加载或预加载5.按用户的需求加载6.避免ifarme嵌套网页等"
}, {
	"姓名": "崔金龙",
	"编号": "237",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "VueRouter可以通过路由的懒加载（lazyloading）来按需加载路由组件，即当路由被访问到时再去加载该组件。实现路由的懒加载，需要用到Webpack的动态import（即import()函数），这个函数可以动态地加载一个模块。在VueRouter中，我们可以利用动态import来实现路由组件的懒加载。例如，我们可以在路由定义中使用import函数来异步加载组件：```importVuefrom'vue'importRouterfrom'vue-router'constHome=()=>import('@/views/Home.vue')constAbout=()=>import('@/views/About.vue')Vue.use(Router)exportdefaultnewRouter({routes:[{path:'/'，name:'Home'，component:Home}，{path:'/about'，name:'About'，component:About}]})```在上面的例子中，我们使用import()函数动态地加载了Home和About组件，这样在访问对应路由时才会去加载这些组件。使用路由的懒加载能够提高应用的性能，因为它可以减少应用首次加载时的代码量，从而提升页面的加载速度。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "VueRouter可以通过路由的懒加载（lazyloading）来按需加载路由组件，即当路由被访问到时再去加载该组件。实现路由的懒加载，需要用到Webpack的动态import（即import()函数），这个函数可以动态地加载一个模块。在VueRouter中，我们可以利用动态import来实现路由组件的懒加载。例如，我们可以在路由定义中使用import函数来异步加载组件：```importVuefrom'vue'importRouterfrom'vue-router'constHome=()=>import('@/views/Home.vue')constAbout=()=>import('@/views/About.vue')Vue.use(Router)exportdefaultnewRouter({routes:[{path:'/'，name:'Home'，component:Home}，{path:'/about'，name:'About'，component:About}]})```在上面的例子中，我们使用import()函数动态地加载了Home和About组件，这样在访问对应路由时才会去加载这些组件。使用路由的懒加载能够提高应用的性能，因为它可以减少应用首次加载时的代码量，从而提升页面的加载速度。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.重复的代码，尤其是在循环中。2.使用多个嵌套的循环，尤其是在大的数据集中。3.使用高消耗的操作，例如递归。4.大量的DOM操作，例如在循环中动态添加或删除元素。5.大量的网络请求，例如在页面中加载很多图片或视频。6.使用浏览器不支持的高级功能，例如大量使用CSS动画或滤镜。7.使用缺乏优化的JavaScript库或框架。",
	"4.在Webpack中，如何配置loader和plugin": "配置loader:1.安装需要的loader，例如css-loader和sass-loader，可以使用npminstall命令安装。2.在webpack.config.js中的module.rules中新增loader的配置项，例如：```javascriptmodule.exports={//...module:{rules:[//...{test:/\\.css$/，use:['style-loader'，'css-loader']}，{test:/\\.scss$/，use:['style-loader'，'css-loader'，'sass-loader']}]}}```这里的配置表明webpack在遇到.css文件时，会先使用css-loader处理，再使用style-loader处理；在遇到.scss文件时，会先使用sass-loader处理，再使用css-loader处理，最后再用style-loader处理。配置plugin:1.安装需要的plugin，例如html-webpack-plugin，可以使用npminstall命令安装。2.在webpack.config.js中的plugins中新增plugin的实例，例如：```javascriptconstHtmlWebpackPlugin=require('html-webpack-plugin')module.exports={//...plugins:[newHtmlWebpackPlugin({template:'./src/index.html'})]}```这里的配置表明webpack会使用html-webpack-plugin插件，在打包时根据模板生成一个新的HTML文件，将打包后的代码注入到新的HTML文件中。可以在template属性中指定模板文件的路径。",
	"5.请说说前端怎么处理网络性能优化？": "1.压缩代码和图片：使用压缩工具，如GZip和Brotli，可以减小文件的大小，从而加快网页的加载速度。同时，使用图片压缩工具，如TinyPNG和Kraken.io，可以减少图片大小，提高网页的响应速度。2.减少HTTP请求次数：通过减少静态资源的数量，请合并css和js文件，精简页面的html可以减少网络的负担，提高页面的加载速度。3.图片懒加载：懒加载是一种延迟加载图片的技术，即滚动到页面特定位置时才加载图片。这可以减少初始加载时间并提高页面性能。4.缓存：使用浏览器缓存技术可以将页面中的一些资源存储在本地，减少重新请求和加载的次数。5.使用CDN：使用CDN可以加速页面的加载速度，因为CDN服务器通常靠近网站访问者的位置。6.去掉重定向：如果网站出现了重定向，那么网站的性能一定会受到影响。尽可能减少或优化网站的重定向，可以有效提高网站的加载速度。7.前端性能测试：可以使用一些前端性能测试工具来测试您的网站性能，例如：GooglePageSpeedInsights和WebPageTest。"
}, {
	"姓名": "宾思雨",
	"编号": "236",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "是将组件块打包成一个js代码块，当访问到对应的路由时，在加载这个路由对应的组件块。异步加载，通过import导入",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "是将组件块打包成一个js代码块，当访问到对应的路由时，在加载这个路由对应的组件块。异步加载，通过import导入",
	"3.在前端开发中，什么样的代码会导致性能很低？": "前端进行较多复杂冗余的数据计算，多次进行数据请求，重复引用组件和文件，不符合规范，执行效率低，不利于优化和复用的代码，",
	"4.在Webpack中，如何配置loader和plugin": "没有用过，后面会学习一下",
	"5.请说说前端怎么处理网络性能优化？": "减少http请求，使用懒加载，防抖和节流"
}, {
	"姓名": "李武钢",
	"编号": "235",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "实现路由懒加载，只需要使用ES中的import进行即可。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "实现路由懒加载，只需要使用ES中的import进行即可。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.引入过大的图片文件或者js文件。2.过多的http请求。3.一次性加载过多图片。4.死循环，或者死递归",
	"4.在Webpack中，如何配置loader和plugin": "loader主要配置在rules属性里面，数组形势，里面是多个对象，plugin配置在plugins属性中，通过new的方法同时传入配置项的方法开始用。",
	"5.请说说前端怎么处理网络性能优化？": "减少请求数量、减小资源大小、优化资源加载、减少重绘回流"
}, {
	"姓名": "林晓航",
	"编号": "234",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "实现懒加载有三种方式：1，Vue异步组件2，import（）3，webpack的require.ensure()方法",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "实现懒加载有三种方式：1，Vue异步组件2，import（）3，webpack的require.ensure()方法",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.不断调用dom元素2.多余重复的css3，内存泄漏没有释放内存4，被遗忘的定时器没有移除5，多次调用循环代码",
	"4.在Webpack中，如何配置loader和plugin": "安装webpack，在package.json文件中，配置处理Js和css的loader{test:/\\.css$/，use:['style-loader'，'css-loader'，{loader:'postcss-loader'，options:{postcssOptions:{plugins:['postcss-preset-env']}}}，'sass-loader'，'less-loader']}在package.json添加plugin的实例类，没个插件都是一个类(构造函数)，直接new就行，可以查看对应插件的官网，了解传的参数对应什么功能。",
	"5.请说说前端怎么处理网络性能优化？": "1，懒加载2，CDN优化3，服务端渲染4加载顺序"
}, {
	"姓名": "吕思洋",
	"编号": "233",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "路由懒加载通过配置component：resolve=>require([]，resolve)按需加载路由组件把不同的路由组件单独打包成一个文件在需要的时候进行加载，这样可以更好的提升用户体验加快页面响应速度",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "路由懒加载通过配置component：resolve=>require([]，resolve)按需加载路由组件把不同的路由组件单独打包成一个文件在需要的时候进行加载，这样可以更好的提升用户体验加快页面响应速度",
	"3.在前端开发中，什么样的代码会导致性能很低？": "前端开发中一般一些对页面元素或者图片的上处理会导致整体页面看上去卡顿显示不完全的问题，比如大型图片没有做好预加载的准备，或者说数据展示处理的时间过长导致页面渲染不及时。减少页面的重绘等",
	"4.在Webpack中，如何配置loader和plugin": "1.loader是在module下面的rules进行配置2.plugin插件在npm引入之后plugins中进行单独配置",
	"5.请说说前端怎么处理网络性能优化？": "尽量减少网络请求，不要多次重复的向服务器请求数据。图片尽可能的压缩到最小大小以及使用cdn来减少请求时间"
}, {
	"姓名": "卢赟",
	"编号": "232",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "1，Vue异步组件2，ES6标准语法import（）3，webpack的require，ensure()/////按需加载omponent:()=>import('@/views/index.vue')，",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "1，Vue异步组件2，ES6标准语法import（）3，webpack的require，ensure()/////按需加载omponent:()=>import('@/views/index.vue')，",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1，过大的本地文件（音视频，图片，第三方包）2，一次性加载过多的模块3，过多的接口请求4，不规范的代码量",
	"4.在Webpack中，如何配置loader和plugin": "loader1，安装需要的loader2，module下的rules定义匹配规则plugin1，安装所需要插件2，plugins配置项下，new出所需插件实力3，配置插件",
	"5.请说说前端怎么处理网络性能优化？": "1，资源合并压缩2，按需加载资源3，使用缓存4，使用快的转译方案5，减少HTTP请求6，使用CDN加速"
}, {
	"姓名": "刘旭",
	"编号": "231",
	"1.碰到一个棘手的问题，您这边通常采取什么样的思路排查问题？": "使用import()动态加载组件，从而实现路由的懒加载。定义路由时使用component属性来指定要加载的组件。",
	"2.VueRouter如何实现路由的懒加载？请描述VueRouter是如何按需加载路由组件的": "使用import()动态加载组件，从而实现路由的懒加载。定义路由时使用component属性来指定要加载的组件。",
	"3.在前端开发中，什么样的代码会导致性能很低？": "1.频繁操作DOM2.大量的数据渲染3.大图的加载4.频繁网络请求",
	"4.在Webpack中，如何配置loader和plugin": " plugins:[newhtmlwebpackplugin({template:\"\"，filename:\"\"})]， module:{  rules:[   {    test:/\\.css$/i，    use:[\"style-loader\"，\"css-loader\"]，   }，  ]， }，",
	"5.请说说前端怎么处理网络性能优化？": "1.减少页面请求：如按需加载2.减少下载量：压缩css图片3.启用缓存4.页面内部优化：css置顶，js置底"
}]
